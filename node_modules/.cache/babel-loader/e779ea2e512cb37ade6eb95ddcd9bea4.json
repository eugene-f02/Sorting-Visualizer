{"ast":null,"code":"import swap from '../misc/swap_func.js';\nexport default function merge_sort_animations(arr) {\n  let animations = [];\n  merge(arr, arr.slice(), animations, 0, arr.length - 1);\n  return animations;\n}\n\nfunction merge(arr, auxArr, animations, startIndx, endIndx) {\n  if (endIndx !== startIndx) {\n    let midIndx = Math.floor((startIndx + endIndx) / 2);\n    merge(auxArr, arr, animations, startIndx, midIndx);\n    merge(auxArr, arr, animations, midIndx + 1, endIndx);\n    let i = startIndx,\n        j = midIndx + 1,\n        k = startIndx;\n\n    while (i <= midIndx && j <= endIndx) {\n      animations.push([i, j]);\n\n      if (auxArr[i] > auxArr[j]) {\n        arr[k] = auxArr[i];\n        animations.push([k, auxArr[i]]);\n        i++;\n      } else {\n        arr[k] = auxArr[j];\n        animations.push([i, j]);\n        animations.push([k, auxArr[j]]);\n        animations.push([i, j]);\n        j++;\n      }\n\n      k++;\n      animations.push([i, j]);\n    }\n\n    while (i <= midIndx) {\n      arr[k] = auxArr[i];\n      animations.push([i, i]);\n      animations.push([k, auxArr[i]]);\n      animations.push([i, i]);\n      i++;\n      k++;\n    }\n\n    while (j <= endIndx) {\n      arr[k] = auxArr[j];\n      animations.push([j, j]);\n      animations.push([j, auxArr[j]]);\n      animations.push([j, j]);\n      j++;\n      k++;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["swap","merge_sort_animations","arr","animations","merge","slice","length","auxArr","startIndx","endIndx","midIndx","Math","floor","i","j","k","push"],"mappings":"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","sourcesContent":["import swap from '../misc/swap_func.js'\n\nexport default function merge_sort_animations(arr){\nlet animations=[]\nmerge(arr,arr.slice(),animations,0,arr.length-1)\nreturn animations\n}\n\nfunction merge(arr,auxArr,animations,startIndx,endIndx){   \n    if (endIndx!==startIndx){\n        let midIndx=Math.floor((startIndx+endIndx)/2)             \n        merge(auxArr,arr,animations,startIndx,midIndx)\n        merge(auxArr,arr,animations,midIndx+1,endIndx)\n        let i=startIndx,j=midIndx+1,k=startIndx\n        while(i<=midIndx && j<=endIndx){\n            animations.push([i,j]);\n            if (auxArr[i]>auxArr[j]){\n                arr[k]=auxArr[i]\n                animations.push([k,auxArr[i]]);\n                i++\n            } \n            else {\n                arr[k]=auxArr[j]\n                animations.push([i,j]);\n                animations.push([k,auxArr[j]]);\n                animations.push([i,j]);\n                j++\n            }\n            k++\n            animations.push([i,j]);\n        }\n        while (i<=midIndx){\n            arr[k]=auxArr[i]\n            animations.push([i,i]);\n            animations.push([k,auxArr[i]]);\n            animations.push([i,i]);\n            i++\n            k++\n        }\n        while (j<=endIndx){\n            arr[k]=auxArr[j]\n            animations.push([j,j]);\n            animations.push([j,auxArr[j]]);\n            animations.push([j,j]);\n            j++ \n            k++\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}