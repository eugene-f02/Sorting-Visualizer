{"ast":null,"code":"var _jsxFileName = \"/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js\";\nimport React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './generateBars.js';\nimport get_linear_sort_animations from './sorting-algo/linear_sort.js';\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js';\nconst c = 700;\n\nclass Bars extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      bars: generateBars(),\n      color: []\n    };\n    this.state.color = Array(this.state.bars.length).fill('black');\n    this.sortBars = this.sortBars.bind(this);\n  }\n\n  renderBar(val, index) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      val: val,\n      color: this.state.color[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    });\n  } // mergeSort(){\n  //     let copyBars=this.state.bars.slice()\n  //     let copyColor=this.state.color.slice()\n  //     let animations=get_merge_sort_animations(this.state.bars.slice())\n  // }\n\n\n  sortBars(button) {\n    let copyBars = this.state.bars.slice();\n    let copyColor = this.state.color.slice();\n    let animations = [];\n\n    if (button === \"linear\") {\n      animations = get_linear_sort_animations(this.state.bars.slice());\n      animations.forEach((value, index) => {\n        if (index % 3 === 0) {\n          setTimeout(() => {\n            copyColor[value[0]] = `red`;\n            copyColor[value[1]] = `blue`;\n            this.setState({\n              color: copyColor\n            });\n          }, c * index);\n        } else if (index % 3 === 1) {\n          setTimeout(() => {\n            let temp = copyBars[value[0]];\n            copyBars[value[0]] = copyBars[value[1]];\n            copyBars[value[1]] = temp;\n            copyColor[value[0]] = `green`;\n            copyColor[value[1]] = `green`;\n            this.setState({\n              bars: copyBars,\n              color: copyColor\n            });\n          }, c * index + c / 2);\n        } else {\n          setTimeout(() => {\n            copyColor[value[0]] = `black`;\n            copyColor[value[1]] = `black`;\n            this.setState({\n              color: copyColor\n            });\n          }, c * index + c);\n        }\n      });\n    } else if (button === \"merge\") {\n      animations = get_merge_sort_animations(this.state.bars.slice());\n      animations.forEach((value, index) => {\n        if (index % 3 === 0) {\n          setTimeout(() => {\n            copyColor[value[0]] = `red`;\n            copyColor[value[1]] = `blue`;\n            this.setState({\n              color: copyColor\n            });\n          }, c * index);\n        } else if (index % 3 === 1) {\n          setTimeout(() => {\n            copyBars[value[0]] = copyBars[value[1]];\n            copyColor[value[0]] = `green`;\n          }, c * index + c / 2);\n        } else {\n          setTimeout(() => {\n            copyColor[value[0]] = `black`;\n            copyColor[value[1]] = `black`;\n            this.setState({\n              color: copyColor\n            });\n          }, c * index + c);\n        }\n      });\n    }\n\n    console.log(animations);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"linear\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, \"Linear Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"merge\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), this.state.bars.map((val, index) => this.renderBar(val, index)));\n  }\n\n}\n\nexport default Bars;","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js"],"names":["React","Bar","generateBars","get_linear_sort_animations","get_merge_sort_animations","c","Bars","Component","constructor","state","bars","color","Array","length","fill","sortBars","bind","renderBar","val","index","button","copyBars","slice","copyColor","animations","forEach","value","setTimeout","setState","temp","console","log","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './generateBars.js'\nimport get_linear_sort_animations from './sorting-algo/linear_sort.js'\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js'\n\n\n\nconst c=700\nclass Bars extends React.Component{\n    constructor(){\n        super()\n        this.state={bars: generateBars(),color:[]}\n        this.state.color=Array(this.state.bars.length).fill('black')\n\n        this.sortBars=this.sortBars.bind(this)\n    }\n\n    renderBar(val,index){\n        return (\n        <Bar key={index} val={val} color={this.state.color[index]}/>\n        );\n    }\n\n\n    // mergeSort(){\n    //     let copyBars=this.state.bars.slice()\n    //     let copyColor=this.state.color.slice()\n    //     let animations=get_merge_sort_animations(this.state.bars.slice())\n\n    // }\n\n\n\n    sortBars(button){\n        let copyBars=this.state.bars.slice()\n        let copyColor=this.state.color.slice()\n        let animations=[]\n        if (button === \"linear\") {\n            animations=get_linear_sort_animations(this.state.bars.slice())\n            animations.forEach( (value,index) =>{\n                if (index % 3 === 0){\n                    setTimeout( () => {\n                            copyColor[value[0]]=`red`\n                            copyColor[value[1]]=`blue`\n                            this.setState({color:copyColor})\n                    },c*index)\n                }\n                else if (index % 3 === 1 ){\n                            setTimeout( () => {\n                                    let temp=copyBars[value[0]]\n                                    copyBars[value[0]]=copyBars[value[1]]\n                                    copyBars[value[1]]=temp\n                                    copyColor[value[0]]=`green`\n                                    copyColor[value[1]]=`green`\n                                    this.setState({bars:copyBars,color:copyColor})\n                            },c*index+c/2)\n                }\n                else{\n                    setTimeout( () => {\n                        copyColor[value[0]]=`black`\n                        copyColor[value[1]]=`black`\n                        this.setState({color:copyColor})\n                    }, c*index+c)\n                }\n                });\n        }\n        else if (button === \"merge\") {\n            animations=get_merge_sort_animations(this.state.bars.slice())\n            animations.forEach( (value,index) =>{\n                if (index % 3 === 0){\n                    setTimeout( () => {\n                            copyColor[value[0]]=`red`\n                            copyColor[value[1]]=`blue`\n                            this.setState({color:copyColor})\n                    },c*index)\n                }\n                else if (index % 3 === 1 ){\n                    setTimeout( () => {\n                        copyBars[value[0]]=copyBars[value[1]]\n                        copyColor[value[0]]=`green`\n                    },c*index+c/2)\n                }\n                else{\n                    setTimeout( () => {\n                        copyColor[value[0]]=`black`\n                        copyColor[value[1]]=`black`\n                        this.setState({color:copyColor})\n                    }, c*index+c)\n                }\n            });\n        }\n        console.log(animations)\n\n    \n    }\n\n    render(){\n        return(\n            <>\n            <button onClick={() => this.sortBars(\"linear\")}>Linear Sort</button>\n            <button onClick={() => this.sortBars(\"merge\")}>Merge Sort</button>\n            {this.state.bars.map( (val,index) => this.renderBar(val,index))}\n\n            </>\n        );\n    }\n}\n\nexport default Bars"]},"metadata":{},"sourceType":"module"}