{"ast":null,"code":"var _jsxFileName = \"/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js\";\nimport React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './generateBars.js';\nimport get_linear_sort_animations from './sorting-algo/linear_sort.js';\nconst c = 20;\n\nclass Bars extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      bars: generateBars(),\n      color: []\n    };\n    this.state.color = Array(this.state.bars.length).fill('black');\n    this.sortBars = this.sortBars.bind(this);\n  }\n\n  renderBar(val, index) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      val: val,\n      color: this.state.color[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    });\n  }\n\n  sortBars() {\n    let copyBars = this.state.bars.slice();\n    let copyColor = this.state.color.slice();\n    let animations = get_linear_sort_animations(copyBars);\n    console.log(this.state); // animations.forEach( (value,index) =>{\n    // if (index % 3 == 0){\n    //     setTimeout( () => {\n    //             copyColor[value[0]]=`red`\n    //             copyColor[value[1]]=`blue`\n    //             this.setState({bars:copyBars,color:copyColor})\n    //     },c*index)\n    // }\n    // else if (index % 3 == 1 ){\n    //     setTimeout( () => {\n    //             let temp=copyBars[value[0]]\n    //             copyBars[value[0]]=copyBars[value[1]]\n    //             copyBars[value[1]]=temp\n    //             copyColor[value[0]]=`green`\n    //             copyColor[value[1]]=`green`\n    //             this.setState({bars:copyBars,color:copyColor})\n    //     },c*index+c/2)\n    // }\n    // else{\n    //     setTimeout( () => {\n    //         copyColor[value[0]]=`black`\n    //         copyColor[value[1]]=`black`\n    //         this.setState({bars:copyBars,color:copyColor})\n    //     }, c*index+c)\n    // }\n    // });\n    // let a=1;\n    // let sorted=true\n    // for (let i=0;i<newBars.bars.length-1;i++){\n    //     if (newBars.bars[i].height<newBars.bars[i+1].height){\n    //     sorted=false\n    //     a++\n    //     const b=i\n    //     setTimeout( () => {\n    //         newBars.bars[b].color=`red`\n    //         newBars.bars[b+1].color=`blue`\n    //         this.setState(newBars)\n    //         },c*a)\n    //     setTimeout( () => {\n    //         let temp=newBars.bars[b].height\n    //         newBars.bars[b].height=newBars.bars[b+1].height\n    //         newBars.bars[b+1].height=temp\n    //         newBars.bars[b].color=`green`\n    //         newBars.bars[b+1].color=`green`\n    //         this.setState(newBars)\n    //         }, c*a+c/2)\n    //     setTimeout( () => {\n    //         newBars.bars[b].color=`black`\n    //         newBars.bars[b+1].color=`black`\n    //         this.setState(newBars)\n    //         }, c*a+c)\n    //     }\n    // }\n    // a++\n    // setTimeout( () => sorted === false ? this.sortBars(): null, c*a)\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.sortBars,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, \"Sort\"), this.state.bars.map((val, index) => this.renderBar(val, index)));\n  }\n\n} // class Bars extends React.Component{\n//     constructor(){\n//         super()\n//         this.state={bars: bars.map( height => [height,`black`])}\n//         this.sortBars=this.sortBars.bind(this)\n//         this.swap=this.swap.bind(this)\n//     }\n//     swap(newBars,a,b){\n//         // console.log(this.state)\n//         var temp=newBars[b][0]\n//         newBars[b][0]=newBars[a][0]\n//         newBars[a][0]=temp\n//         newBars[b][1]=`red`\n//         newBars[a][1]=`blue`\n//         this.setState({bars: newBars})\n//     }\n//     swap2(newBars,a,b){\n//         newBars[b][1]=`black`\n//         newBars[a][1]=`black`\n//         this.setState({bars: newBars})\n//     }\n//     sortBars(){\n//         var sorted=true\n//         var a=1\n//         var newBars=this.state.bars\n//         for (var i=0; i<=this.state.bars.length-2;i++){\n//             if (this.state.bars[i][0]<this.state.bars[i+1][0]){\n//                 sorted=false\n//                 a++\n//                 const b=i\n//                 setTimeout( () => this.swap(newBars,b,b+1), 15*a)\n//                 setTimeout( () => this.swap2(newBars,b,b+1), 17*a)\n//             }\n//         }\n//         a++\n//         setTimeout( () => sorted === false ? this.sortBars(): null, 17*a)\n//     }\n//     render(){\n//         return(\n//             <>\n//             <button onClick={this.sortBars}>Sort</button>\n//             {this.state.bars.map((val,index) => (\n//                 <div className={index} key={index} style={{background: val[1], marginRight: `10px`, height: val[0], float: 'left', width: `15px`}}>   \n//                 </div>\n//             ))}\n//             </>\n//         );\n//     }\n// }\n\n\nexport default Bars;","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js"],"names":["React","Bar","generateBars","get_linear_sort_animations","c","Bars","Component","constructor","state","bars","color","Array","length","fill","sortBars","bind","renderBar","val","index","copyBars","slice","copyColor","animations","console","log","render","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,0BAAP,MAAuC,+BAAvC;AACA,MAAMC,CAAC,GAAC,EAAR;;AACA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAkC;AAC9BC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAW;AAACC,MAAAA,IAAI,EAAEP,YAAY,EAAnB;AAAsBQ,MAAAA,KAAK,EAAC;AAA5B,KAAX;AACA,SAAKF,KAAL,CAAWE,KAAX,GAAiBC,KAAK,CAAC,KAAKH,KAAL,CAAWC,IAAX,CAAgBG,MAAjB,CAAL,CAA8BC,IAA9B,CAAmC,OAAnC,CAAjB;AAEA,SAAKC,QAAL,GAAc,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAd;AACH;;AAEDC,EAAAA,SAAS,CAACC,GAAD,EAAKC,KAAL,EAAW;AAChB,wBACA,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAiB,MAAA,GAAG,EAAED,GAAtB;AAA2B,MAAA,KAAK,EAAE,KAAKT,KAAL,CAAWE,KAAX,CAAiBQ,KAAjB,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAGH;;AAEDJ,EAAAA,QAAQ,GAAE;AACN,QAAIK,QAAQ,GAAC,KAAKX,KAAL,CAAWC,IAAX,CAAgBW,KAAhB,EAAb;AACA,QAAIC,SAAS,GAAC,KAAKb,KAAL,CAAWE,KAAX,CAAiBU,KAAjB,EAAd;AACA,QAAIE,UAAU,GAACnB,0BAA0B,CAACgB,QAAD,CAAzC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhB,KAAjB,EAJM,CAKN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDiB,EAAAA,MAAM,GAAE;AACJ,wBACI,uDACA;AAAQ,MAAA,OAAO,EAAE,KAAKX,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAEC,KAAKN,KAAL,CAAWC,IAAX,CAAgBiB,GAAhB,CAAqB,CAACT,GAAD,EAAKC,KAAL,KAAe,KAAKF,SAAL,CAAeC,GAAf,EAAmBC,KAAnB,CAApC,CAFD,CADJ;AAOH;;AArF6B,C,CAwFlC;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,eAAeb,IAAf","sourcesContent":["import React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './generateBars.js'\nimport get_linear_sort_animations from './sorting-algo/linear_sort.js'\nconst c=20\nclass Bars extends React.Component{\n    constructor(){\n        super()\n        this.state={bars: generateBars(),color:[]}\n        this.state.color=Array(this.state.bars.length).fill('black')\n\n        this.sortBars=this.sortBars.bind(this)\n    }\n\n    renderBar(val,index){\n        return (\n        <Bar key={index} val={val} color={this.state.color[index]}/>\n        );\n    }\n\n    sortBars(){\n        let copyBars=this.state.bars.slice()\n        let copyColor=this.state.color.slice()\n        let animations=get_linear_sort_animations(copyBars)\n        console.log(this.state)\n        // animations.forEach( (value,index) =>{\n        // if (index % 3 == 0){\n        //     setTimeout( () => {\n        //             copyColor[value[0]]=`red`\n        //             copyColor[value[1]]=`blue`\n        //             this.setState({bars:copyBars,color:copyColor})\n        //     },c*index)\n        // }\n        // else if (index % 3 == 1 ){\n        //     setTimeout( () => {\n        //             let temp=copyBars[value[0]]\n        //             copyBars[value[0]]=copyBars[value[1]]\n        //             copyBars[value[1]]=temp\n        //             copyColor[value[0]]=`green`\n        //             copyColor[value[1]]=`green`\n        //             this.setState({bars:copyBars,color:copyColor})\n        //     },c*index+c/2)\n        // }\n        // else{\n        //     setTimeout( () => {\n        //         copyColor[value[0]]=`black`\n        //         copyColor[value[1]]=`black`\n        //         this.setState({bars:copyBars,color:copyColor})\n        //     }, c*index+c)\n        // }\n        // });\n        // let a=1;\n        // let sorted=true\n        // for (let i=0;i<newBars.bars.length-1;i++){\n        //     if (newBars.bars[i].height<newBars.bars[i+1].height){\n        //     sorted=false\n        //     a++\n        //     const b=i\n        //     setTimeout( () => {\n        //         newBars.bars[b].color=`red`\n        //         newBars.bars[b+1].color=`blue`\n        //         this.setState(newBars)\n        //         },c*a)\n        //     setTimeout( () => {\n        //         let temp=newBars.bars[b].height\n        //         newBars.bars[b].height=newBars.bars[b+1].height\n        //         newBars.bars[b+1].height=temp\n        //         newBars.bars[b].color=`green`\n        //         newBars.bars[b+1].color=`green`\n        //         this.setState(newBars)\n        //         }, c*a+c/2)\n        //     setTimeout( () => {\n        //         newBars.bars[b].color=`black`\n        //         newBars.bars[b+1].color=`black`\n        //         this.setState(newBars)\n        //         }, c*a+c)\n        //     }\n        // }\n        // a++\n        // setTimeout( () => sorted === false ? this.sortBars(): null, c*a)\n    }\n\n    render(){\n        return(\n            <>\n            <button onClick={this.sortBars}>Sort</button>\n            {this.state.bars.map( (val,index) => this.renderBar(val,index))}\n\n            </>\n        );\n    }\n}\n\n// class Bars extends React.Component{\n//     constructor(){\n//         super()\n//         this.state={bars: bars.map( height => [height,`black`])}\n\n\n\n//         this.sortBars=this.sortBars.bind(this)\n//         this.swap=this.swap.bind(this)\n//     }\n\n\n//     swap(newBars,a,b){\n//         // console.log(this.state)\n//         var temp=newBars[b][0]\n//         newBars[b][0]=newBars[a][0]\n//         newBars[a][0]=temp\n//         newBars[b][1]=`red`\n//         newBars[a][1]=`blue`\n//         this.setState({bars: newBars})\n//     }\n\n\n//     swap2(newBars,a,b){\n//         newBars[b][1]=`black`\n//         newBars[a][1]=`black`\n//         this.setState({bars: newBars})\n        \n//     }\n    \n//     sortBars(){\n//         var sorted=true\n//         var a=1\n//         var newBars=this.state.bars\n//         for (var i=0; i<=this.state.bars.length-2;i++){\n//             if (this.state.bars[i][0]<this.state.bars[i+1][0]){\n//                 sorted=false\n//                 a++\n//                 const b=i\n//                 setTimeout( () => this.swap(newBars,b,b+1), 15*a)\n//                 setTimeout( () => this.swap2(newBars,b,b+1), 17*a)\n//             }\n\n        \n//         }\n//         a++\n//         setTimeout( () => sorted === false ? this.sortBars(): null, 17*a)\n\n//     }\n\n//     render(){\n//         return(\n//             <>\n//             <button onClick={this.sortBars}>Sort</button>\n//             {this.state.bars.map((val,index) => (\n//                 <div className={index} key={index} style={{background: val[1], marginRight: `10px`, height: val[0], float: 'left', width: `15px`}}>   \n//                 </div>\n//             ))}\n\n//             </>\n//         );\n//     }\n// }\n\nexport default Bars"]},"metadata":{},"sourceType":"module"}