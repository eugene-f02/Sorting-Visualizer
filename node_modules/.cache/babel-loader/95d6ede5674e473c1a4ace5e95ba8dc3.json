{"ast":null,"code":"export default function merge_sort_animations(arr) {\n  console.log(arr);\n  let testArr = arr.slice();\n  let animations = []; // let k=1\n  // asd(k)\n  // return k\n\n  merge(arr, testArr, animations, 0, arr.length);\n  return testArr;\n} // function asd(k){\n//     return k++\n// }\n\nfunction merge(arr, auxArr, animations, startIndx, endIndx) {\n  if (endIndx - startIndx !== 1) {\n    let midIndx = Math.floor((startIndx + endIndx) / 2); //[5,3,5,6,3,1] \n    // 0 6       | 0 3      | 1 3    |\n    // 3         | 1        | 2      |\n    // [5,3,5]   | [5]      | [3]    |\n    // [6,3,1]   | [3,5]    | [5]    |\n\n    merge(arr, auxArr, animations, startIndx, midIndx);\n    merge(arr, auxArr, animations, midIndx, endIndx);\n    let i = startIndx,\n        j = midIndx,\n        k = startIndx;\n    console.log(startIndx, midIndx, endIndx);\n\n    while (i < midIndx && j < endIndx) {\n      if (arr[i] > arr[j]) {\n        auxArr[k] = arr[i];\n        animations.push([i, j]);\n        animations.push([i, arr[i]]);\n        animations.push([i, j]);\n        i++;\n      } else {\n        auxArr[k] = arr[j];\n        animations.push([i, j]);\n        animations.push([i, arr[j]]);\n        animations.push([i, j]);\n        j++;\n      }\n\n      k++;\n    }\n\n    while (i < midIndx) {\n      auxArr[k] = arr[i];\n      animations.push([i, i]);\n      animations.push([i, arr[i]]);\n      animations.push([i, i]);\n      i++;\n      k++;\n    }\n\n    while (j < endIndx) {\n      auxArr[k] = arr[j];\n      animations.push([j, j]);\n      animations.push([j, arr[j]]);\n      animations.push([j, j]);\n      j++;\n      k++;\n    }\n\n    console.log(auxArr);\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["merge_sort_animations","arr","console","log","testArr","slice","animations","merge","length","auxArr","startIndx","endIndx","midIndx","Math","floor","i","j","k","push"],"mappings":"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","sourcesContent":["export default function merge_sort_animations(arr){\nconsole.log(arr)\nlet testArr=arr.slice()\nlet animations=[]\n// let k=1\n// asd(k)\n// return k\nmerge(arr,testArr,animations,0,arr.length)\nreturn testArr\n}\n\n// function asd(k){\n//     return k++\n\n// }\n\nfunction merge(arr,auxArr,animations,startIndx,endIndx){   \n   \n    if (endIndx-startIndx!==1){\n        let midIndx=Math.floor((startIndx+endIndx)/2)     \n                  \n                   //[5,3,5,6,3,1] \n\n                   // 0 6       | 0 3      | 1 3    |\n                   // 3         | 1        | 2      |\n                   // [5,3,5]   | [5]      | [3]    |\n                   // [6,3,1]   | [3,5]    | [5]    |\n        \n        merge(arr,auxArr,animations,startIndx,midIndx)\n        merge(arr,auxArr,animations,midIndx,endIndx)\n        let i=startIndx,j=midIndx,k=startIndx\n        console.log(startIndx,midIndx,endIndx)\n        \n        \n\n        while(i<midIndx && j<endIndx){\n            if (arr[i]>arr[j]){\n             auxArr[k]=arr[i]\n             animations.push([i,j]);\n             animations.push([i,arr[i]]);\n             animations.push([i,j]);\n             i++\n           \n\n\n\n            } \n            else {\n                auxArr[k]=arr[j]\n                animations.push([i,j]);\n                animations.push([i,arr[j]]);\n                animations.push([i,j]);\n                j++\n            \n\n\n\n            \n\n            }\n            k++\n\n\n        }\n        \n        while (i<midIndx){\n            auxArr[k]=arr[i]\n            animations.push([i,i]);\n            animations.push([i,arr[i]]);\n            animations.push([i,i]);\n\n\n            i++\n\n          \n            k++\n\n\n        }\n        \n        while (j<endIndx){\n            auxArr[k]=arr[j]\n            animations.push([j,j]);\n            animations.push([j,arr[j]]);\n            animations.push([j,j]);\n\n            j++\n            \n            k++\n            \n        }\n        console.log(auxArr)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}