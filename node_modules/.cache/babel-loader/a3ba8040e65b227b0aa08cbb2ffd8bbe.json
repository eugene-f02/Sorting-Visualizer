{"ast":null,"code":"export default function merge_sort_animations(arr) {\n  let testArr = arr.slice();\n  let animations = []; // let k=1\n  // asd(k)\n  // return k\n\n  merge(arr, testArr, animations, 0, arr.length - 1);\n  console.log(testArr);\n  return testArr;\n} // function asd(k){\n//     return k++\n// }\n\nfunction merge(arr, auxArr, animations, startIndx, endIndx) {\n  if (endIndx !== startIndx) {\n    let midIndx = Math.floor((startIndx + endIndx) / 2); //[5,3,5,6,3,1] \n    // 0 6       | 0 3      | 1 3    |\n    // 3         | 1        | 2      |\n    // [5,3,5]   | [5]      | [3]    |\n    // [6,3,1]   | [3,5]    | [5]    |\n    // console.log(startIndx,midIndx,endIndx)\n\n    merge(arr, auxArr, animations, startIndx, midIndx);\n    merge(arr, auxArr, animations, midIndx + 1, endIndx);\n    let i = startIndx,\n        j = midIndx + 1,\n        k = startIndx; // 0 2 0\n\n    while (i <= midIndx && j <= endIndx) {\n      // console.log(auxArr[i],auxArr[j],auxArr)\n      if (auxArr[i] > auxArr[j]) {\n        arr[k] = auxArr[i];\n        animations.push([i, j]);\n        animations.push([i, arr[i]]);\n        animations.push([i, j]);\n        i++;\n      } else {\n        arr[k] = auxArr[j];\n        animations.push([i, j]);\n        animations.push([i, arr[j]]);\n        animations.push([i, j]);\n        j++;\n      }\n\n      k++;\n    }\n\n    while (i <= midIndx) {\n      arr[k] = auxArr[i];\n      animations.push([i, i]);\n      animations.push([i, arr[i]]);\n      animations.push([i, i]);\n      i++;\n      k++;\n    }\n\n    while (j <= endIndx) {\n      arr[k] = auxArr[j];\n      animations.push([j, j]);\n      animations.push([j, arr[j]]);\n      animations.push([j, j]);\n      j++;\n      k++;\n    } // console.log(auxArr)\n\n  }\n}\n\nfunction get_merge_sort_animations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  console.log(auxiliaryArray);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] > auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["merge_sort_animations","arr","testArr","slice","animations","merge","length","console","log","auxArr","startIndx","endIndx","midIndx","Math","floor","i","j","k","push","get_merge_sort_animations","array","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","doMerge"],"mappings":"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","sourcesContent":["export default function merge_sort_animations(arr){\nlet testArr=arr.slice()\nlet animations=[]\n// let k=1\n// asd(k)\n// return k\nmerge(arr,testArr,animations,0,arr.length-1)\nconsole.log(testArr)\nreturn testArr\n}\n\n// function asd(k){\n//     return k++\n\n// }\n\nfunction merge(arr,auxArr,animations,startIndx,endIndx){   \n    if (endIndx!==startIndx){\n        let midIndx=Math.floor((startIndx+endIndx)/2)             \n                   //[5,3,5,6,3,1] \n\n                   // 0 6       | 0 3      | 1 3    |\n                   // 3         | 1        | 2      |\n                   // [5,3,5]   | [5]      | [3]    |\n                   // [6,3,1]   | [3,5]    | [5]    |\n        // console.log(startIndx,midIndx,endIndx)\n        merge(arr,auxArr,animations,startIndx,midIndx)\n        merge(arr,auxArr,animations,midIndx+1,endIndx)\n        let i=startIndx,j=midIndx+1,k=startIndx\n        \n        \n        \n// 0 2 0\n        while(i<=midIndx && j<=endIndx){\n            \n            // console.log(auxArr[i],auxArr[j],auxArr)\n\n            if (auxArr[i]>auxArr[j]){\n             arr[k]=auxArr[i]\n             animations.push([i,j]);\n             animations.push([i,arr[i]]);\n             animations.push([i,j]);\n             i++\n           \n\n\n\n            } \n            else {\n                arr[k]=auxArr[j]\n                animations.push([i,j]);\n                animations.push([i,arr[j]]);\n                animations.push([i,j]);\n                j++\n            \n\n\n\n            \n\n            }\n            k++\n\n\n        }\n        \n        while (i<=midIndx){\n            arr[k]=auxArr[i]\n            animations.push([i,i]);\n            animations.push([i,arr[i]]);\n            animations.push([i,i]);\n\n\n            i++\n\n          \n            k++\n\n\n        }\n        \n        while (j<=endIndx){\n            arr[k]=auxArr[j]\n            animations.push([j,j]);\n            animations.push([j,arr[j]]);\n            animations.push([j,j]);\n\n            j++\n            \n            k++\n            \n        }\n        // console.log(auxArr)\n    }\n}\n\n\nfunction get_merge_sort_animations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    console.log(auxiliaryArray)\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] > auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }"]},"metadata":{},"sourceType":"module"}