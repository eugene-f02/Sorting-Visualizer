{"ast":null,"code":"export default function merge_sort_animations(arr) {\n  let animations = []; // let k=1\n  // asd(k)\n  // return k\n\n  merge(arr, arr.slice(), animations, 0, arr.length);\n  return animations;\n} // function asd(k){\n//     return k++\n// }\n\nfunction merge(arr, auxArr, animations, startIndx, endIndx) {\n  // 0 6       | 0 2      | 1 2 |\n  if (auxArr.length > 1) {\n    let midIndx = Math.floor(auxArr.length / 2); // 2         | 1        | 0\n\n    let L = auxArr.slice(0, midIndx); // [5,3,5]   | [5]      | [3]\n\n    let R = auxArr.slice(midIndx); // [6,3,1]   | [3,5]    | [3]\n\n    merge(arr, L, animations, startIndx, midIndx);\n    merge(arr, R, animations, midIndx, endIndx);\n    let i = 0,\n        j = 0,\n        k = 0; //[5,3,5,6,3,1]\n\n    while (i < L.length && j < R.length) {\n      if (L[i] > R[j]) {\n        auxArr[k] = L[i];\n        i++;\n        animations.push([startIndx + i, startIndx + midIndx + j - 1]);\n        animations.push([startIndx + i, startIndx + midIndx + j - 1]);\n        animations.push([startIndx + i, startIndx + midIndx + j - 1]);\n        console.log(L, R, startIndx, endIndx, midIndx);\n      } else {\n        auxArr[k] = R[j];\n        j++;\n        animations.push([startIndx + i, startIndx + midIndx + j - 1]);\n        animations.push([startIndx + i, startIndx + midIndx + j - 1]);\n        animations.push([startIndx + midIndx + j - 1, startIndx + i]);\n      }\n\n      k++;\n    }\n\n    while (i < L.length) {\n      auxArr[k] = L[i];\n      i++;\n      k++;\n    }\n\n    while (j < R.length) {\n      auxArr[k] = R[j];\n      j++;\n      k++;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["merge_sort_animations","arr","animations","merge","slice","length","auxArr","startIndx","endIndx","midIndx","Math","floor","L","R","i","j","k","push","console","log"],"mappings":"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","sourcesContent":["export default function merge_sort_animations(arr){\nlet animations=[]\n// let k=1\n// asd(k)\n// return k\nmerge(arr,arr.slice(),animations,0,arr.length)\nreturn animations\n}\n\n// function asd(k){\n//     return k++\n\n// }\n\nfunction merge(arr,auxArr,animations,startIndx,endIndx){    // 0 6       | 0 2      | 1 2 |\n    if (auxArr.length>1){\n        \n        let midIndx=Math.floor(auxArr.length/2)             // 2         | 1        | 0\n        let L = auxArr.slice(0,midIndx)                     // [5,3,5]   | [5]      | [3]\n        let R = auxArr.slice(midIndx)                       // [6,3,1]   | [3,5]    | [3]\n\n\n        merge(arr,L,animations,startIndx,midIndx)\n        merge(arr,R,animations,midIndx,endIndx)\n        let i=0,j=0,k=0\n        \n        //[5,3,5,6,3,1]\n\n        while(i<L.length && j<R.length){\n            if (L[i]>R[j]){\n                auxArr[k]=L[i]\n            \n                i++\n            animations.push([startIndx+i,startIndx+midIndx+j-1]);animations.push([startIndx+i,startIndx+midIndx+j-1]);animations.push([startIndx+i,startIndx+midIndx+j-1])\n        console.log(L,R,startIndx,endIndx,midIndx)\n            \n\n\n            }\n            else {\n                auxArr[k]=R[j]\n\n\n                j++\n            animations.push([startIndx+i,startIndx+midIndx+j-1]);animations.push([startIndx+i,startIndx+midIndx+j-1]);animations.push([startIndx+midIndx+j-1,startIndx+i])\n\n            }\n            k++\n\n        }\n        \n        while (i<L.length){\n            auxArr[k]=L[i]\n      \n\n            i++\n            k++\n\n\n        }\n        \n        while (j<R.length){\n            auxArr[k]=R[j]\n    \n\n            j++\n            k++\n            \n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}