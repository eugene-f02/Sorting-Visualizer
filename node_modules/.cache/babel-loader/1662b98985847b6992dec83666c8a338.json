{"ast":null,"code":"export default function merge_sort_animations(arr) {\n  let animations = []; // let k=1\n  // asd(k)\n  // return k\n\n  merge(arr, arr.slice(), animations, 0, arr.length);\n  return animations;\n} // function asd(k){\n//     return k++\n// }\n\nfunction merge(arr, auxArr, animations, startIndx, endIndx) {\n  if (auxArr.length > 1) {\n    let midIndx = Math.floor((endIndx - startIndx) / 2); // 2\n\n    let L = auxArr.slice(0, midIndx); //\n\n    let R = auxArr.slice(midIndx);\n    let Left_length = midIndx - startIndx;\n    let Right_length = endIndx - midIndx;\n    merge(arr, L, animations, startIndx, midIndx);\n    merge(arr, R, animations, midIndx, endIndx);\n    let i = 0,\n        j = 0,\n        k = 0; //[5,3,5,6,3,1]\n\n    console.log(startIndx, endIndx, midIndx);\n\n    while (i < L.length && j < R.length) {\n      if (L[i] > R[j]) {\n        auxArr[k] = L[i];\n        animations.push([startIndx + i, midIndx + j]);\n        i++;\n      } else {\n        auxArr[k] = R[j];\n        j++;\n      }\n\n      k++;\n    }\n\n    while (i < L.length) {\n      auxArr[k] = L[i];\n      i++;\n      k++;\n    }\n\n    while (j < R.length) {\n      auxArr[k] = R[j];\n      j++;\n      k++;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["merge_sort_animations","arr","animations","merge","slice","length","auxArr","startIndx","endIndx","midIndx","Math","floor","L","R","Left_length","Right_length","i","j","k","console","log","push"],"mappings":"AAAA,eAAe,SAASA,qBAAT,CAA+BC,GAA/B,EAAmC;AAClD,MAAIC,UAAU,GAAC,EAAf,CADkD,CAElD;AACA;AACA;;AACAC,EAAAA,KAAK,CAACF,GAAD,EAAKA,GAAG,CAACG,KAAJ,EAAL,EAAiBF,UAAjB,EAA4B,CAA5B,EAA8BD,GAAG,CAACI,MAAlC,CAAL;AACA,SAAOH,UAAP;AACC,C,CAED;AACA;AAEA;;AAEA,SAASC,KAAT,CAAeF,GAAf,EAAmBK,MAAnB,EAA0BJ,UAA1B,EAAqCK,SAArC,EAA+CC,OAA/C,EAAuD;AACnD,MAAIF,MAAM,CAACD,MAAP,GAAc,CAAlB,EAAoB;AAEhB,QAAII,OAAO,GAACC,IAAI,CAACC,KAAL,CAAW,CAACH,OAAO,GAACD,SAAT,IAAoB,CAA/B,CAAZ,CAFgB,CAE8B;;AAC9C,QAAIK,CAAC,GAAGN,MAAM,CAACF,KAAP,CAAa,CAAb,EAAeK,OAAf,CAAR,CAHgB,CAGgB;;AAChC,QAAII,CAAC,GAAGP,MAAM,CAACF,KAAP,CAAaK,OAAb,CAAR;AACA,QAAIK,WAAW,GAACL,OAAO,GAACF,SAAxB;AACA,QAAIQ,YAAY,GAACP,OAAO,GAACC,OAAzB;AACAN,IAAAA,KAAK,CAACF,GAAD,EAAKW,CAAL,EAAOV,UAAP,EAAkBK,SAAlB,EAA4BE,OAA5B,CAAL;AACAN,IAAAA,KAAK,CAACF,GAAD,EAAKY,CAAL,EAAOX,UAAP,EAAkBO,OAAlB,EAA0BD,OAA1B,CAAL;AACA,QAAIQ,CAAC,GAAC,CAAN;AAAA,QAAQC,CAAC,GAAC,CAAV;AAAA,QAAYC,CAAC,GAAC,CAAd,CATgB,CAWhB;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYb,SAAZ,EAAsBC,OAAtB,EAA8BC,OAA9B;;AACA,WAAMO,CAAC,GAACJ,CAAC,CAACP,MAAJ,IAAcY,CAAC,GAACJ,CAAC,CAACR,MAAxB,EAA+B;AAC3B,UAAIO,CAAC,CAACI,CAAD,CAAD,GAAKH,CAAC,CAACI,CAAD,CAAV,EAAc;AACVX,QAAAA,MAAM,CAACY,CAAD,CAAN,GAAUN,CAAC,CAACI,CAAD,CAAX;AACAd,QAAAA,UAAU,CAACmB,IAAX,CAAgB,CAACd,SAAS,GAACS,CAAX,EAAaP,OAAO,GAACQ,CAArB,CAAhB;AAEAD,QAAAA,CAAC;AAGJ,OAPD,MAQK;AACDV,QAAAA,MAAM,CAACY,CAAD,CAAN,GAAUL,CAAC,CAACI,CAAD,CAAX;AAGAA,QAAAA,CAAC;AACJ;;AACDC,MAAAA,CAAC;AAEJ;;AAED,WAAOF,CAAC,GAACJ,CAAC,CAACP,MAAX,EAAkB;AACdC,MAAAA,MAAM,CAACY,CAAD,CAAN,GAAUN,CAAC,CAACI,CAAD,CAAX;AAGAA,MAAAA,CAAC;AACDE,MAAAA,CAAC;AACJ;;AAED,WAAOD,CAAC,GAACJ,CAAC,CAACR,MAAX,EAAkB;AACdC,MAAAA,MAAM,CAACY,CAAD,CAAN,GAAUL,CAAC,CAACI,CAAD,CAAX;AAGAA,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACJ;AACJ;AACJ","sourcesContent":["export default function merge_sort_animations(arr){\nlet animations=[]\n// let k=1\n// asd(k)\n// return k\nmerge(arr,arr.slice(),animations,0,arr.length)\nreturn animations\n}\n\n// function asd(k){\n//     return k++\n\n// }\n\nfunction merge(arr,auxArr,animations,startIndx,endIndx){\n    if (auxArr.length>1){\n        \n        let midIndx=Math.floor((endIndx-startIndx)/2) // 2\n        let L = auxArr.slice(0,midIndx) //\n        let R = auxArr.slice(midIndx)\n        let Left_length=midIndx-startIndx\n        let Right_length=endIndx-midIndx\n        merge(arr,L,animations,startIndx,midIndx)\n        merge(arr,R,animations,midIndx,endIndx)\n        let i=0,j=0,k=0\n        \n        //[5,3,5,6,3,1]\n        console.log(startIndx,endIndx,midIndx)\n        while(i<L.length && j<R.length){\n            if (L[i]>R[j]){\n                auxArr[k]=L[i]\n                animations.push([startIndx+i,midIndx+j])\n            \n                i++\n\n\n            }\n            else {\n                auxArr[k]=R[j]\n\n\n                j++\n            }\n            k++\n        \n        }\n        \n        while (i<L.length){\n            auxArr[k]=L[i]\n      \n\n            i++\n            k++\n        }\n        \n        while (j<R.length){\n            auxArr[k]=R[j]\n    \n\n            j++\n            k++\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}