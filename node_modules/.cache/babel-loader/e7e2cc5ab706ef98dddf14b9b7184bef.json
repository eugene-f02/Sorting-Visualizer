{"ast":null,"code":"export default function merge_sort_animations(arr) {\n  console.log(arr);\n  let testArr = arr.slice();\n  let animations = []; // let k=1\n  // asd(k)\n  // return k\n\n  merge(arr, testArr, animations, 0, arr.length - 1);\n  return testArr;\n} // function asd(k){\n//     return k++\n// }\n\nfunction merge(arr, auxArr, animations, startIndx, endIndx) {\n  if (endIndx !== startIndx) {\n    let midIndx = Math.floor((startIndx + endIndx) / 2); //[5,3,5,6,3,1] \n    // 0 6       | 0 3      | 1 3    |\n    // 3         | 1        | 2      |\n    // [5,3,5]   | [5]      | [3]    |\n    // [6,3,1]   | [3,5]    | [5]    |\n\n    console.log(startIndx, midIndx, endIndx);\n    merge(arr, auxArr, animations, startIndx, midIndx);\n    merge(arr, auxArr, animations, midIndx + 1, endIndx);\n    let i = startIndx,\n        j = midIndx + 1,\n        k = startIndx; // 0 2 0\n\n    while (i <= midIndx && j <= endIndx) {\n      console.log(auxArr[i], auxArr[j], auxArr);\n\n      if (auxArr[i] > auxArr[j]) {\n        arr[k] = auxArr[i];\n        animations.push([i, j]);\n        animations.push([i, arr[i]]);\n        animations.push([i, j]);\n        i++;\n      } else {\n        arr[k] = auxArr[j];\n        animations.push([i, j]);\n        animations.push([i, arr[j]]);\n        animations.push([i, j]);\n        j++;\n      }\n\n      k++;\n    }\n\n    while (i <= midIndx) {\n      arr[k] = auxArr[i];\n      animations.push([i, i]);\n      animations.push([i, arr[i]]);\n      animations.push([i, i]);\n      i++;\n      k++;\n    }\n\n    while (j <= endIndx) {\n      arr[k] = auxArr[j];\n      animations.push([j, j]);\n      animations.push([j, arr[j]]);\n      animations.push([j, j]);\n      j++;\n      k++;\n    }\n\n    console.log(auxArr);\n  }\n} // export default function get_merge_sort_animations(array) {\n//     const animations = [];\n//     if (array.length <= 1) return array;\n//     const auxiliaryArray = array.slice();\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n//     console.log(auxiliaryArray)\n//     return animations;\n//   }\n//   function mergeSortHelper(\n//     mainArray,\n//     startIdx,\n//     endIdx,\n//     auxiliaryArray,\n//     animations,\n//   ) {\n//     if (startIdx === endIdx) return;\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//     mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n//     mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n//     doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n//   }\n//   function doMerge(\n//     mainArray,\n//     startIdx,\n//     middleIdx,\n//     endIdx,\n//     auxiliaryArray,\n//     animations,\n//   ) {\n//     let k = startIdx;\n//     let i = startIdx;\n//     let j = middleIdx + 1;\n//     while (i <= middleIdx && j <= endIdx) {\n//       // These are the values that we're comparing; we push them once\n//       // to change their color.\n//       animations.push([i, j]);\n//       // These are the values that we're comparing; we push them a second\n//       // time to revert their color.\n//       animations.push([i, j]);\n//       if (auxiliaryArray[i] > auxiliaryArray[j]) {\n//         // We overwrite the value at index k in the original array with the\n//         // value at index i in the auxiliary array.\n//         animations.push([k, auxiliaryArray[i]]);\n//         mainArray[k++] = auxiliaryArray[i++];\n//       } else {\n//         // We overwrite the value at index k in the original array with the\n//         // value at index j in the auxiliary array.\n//         animations.push([k, auxiliaryArray[j]]);\n//         mainArray[k++] = auxiliaryArray[j++];\n//       }\n//     }\n//     while (i <= middleIdx) {\n//       // These are the values that we're comparing; we push them once\n//       // to change their color.\n//       animations.push([i, i]);\n//       // These are the values that we're comparing; we push them a second\n//       // time to revert their color.\n//       animations.push([i, i]);\n//       // We overwrite the value at index k in the original array with the\n//       // value at index i in the auxiliary array.\n//       animations.push([k, auxiliaryArray[i]]);\n//       mainArray[k++] = auxiliaryArray[i++];\n//     }\n//     while (j <= endIdx) {\n//       // These are the values that we're comparing; we push them once\n//       // to change their color.\n//       animations.push([j, j]);\n//       // These are the values that we're comparing; we push them a second\n//       // time to revert their color.\n//       animations.push([j, j]);\n//       // We overwrite the value at index k in the original array with the\n//       // value at index j in the auxiliary array.\n//       animations.push([k, auxiliaryArray[j]]);\n//       mainArray[k++] = auxiliaryArray[j++];\n//     }\n//   }","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["merge_sort_animations","arr","console","log","testArr","slice","animations","merge","length","auxArr","startIndx","endIndx","midIndx","Math","floor","i","j","k","push"],"mappings":"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","sourcesContent":["export default function merge_sort_animations(arr){\nconsole.log(arr)\nlet testArr=arr.slice()\nlet animations=[]\n// let k=1\n// asd(k)\n// return k\nmerge(arr,testArr,animations,0,arr.length-1)\nreturn testArr\n}\n\n// function asd(k){\n//     return k++\n\n// }\n\nfunction merge(arr,auxArr,animations,startIndx,endIndx){   \n    if (endIndx!==startIndx){\n        let midIndx=Math.floor((startIndx+endIndx)/2)             \n                   //[5,3,5,6,3,1] \n\n                   // 0 6       | 0 3      | 1 3    |\n                   // 3         | 1        | 2      |\n                   // [5,3,5]   | [5]      | [3]    |\n                   // [6,3,1]   | [3,5]    | [5]    |\n        console.log(startIndx,midIndx,endIndx)\n        merge(arr,auxArr,animations,startIndx,midIndx)\n        merge(arr,auxArr,animations,midIndx+1,endIndx)\n        let i=startIndx,j=midIndx+1,k=startIndx\n        \n        \n        \n// 0 2 0\n        while(i<=midIndx && j<=endIndx){\n            \n            console.log(auxArr[i],auxArr[j],auxArr)\n\n            if (auxArr[i]>auxArr[j]){\n             arr[k]=auxArr[i]\n             animations.push([i,j]);\n             animations.push([i,arr[i]]);\n             animations.push([i,j]);\n             i++\n           \n\n\n\n            } \n            else {\n                arr[k]=auxArr[j]\n                animations.push([i,j]);\n                animations.push([i,arr[j]]);\n                animations.push([i,j]);\n                j++\n            \n\n\n\n            \n\n            }\n            k++\n\n\n        }\n        \n        while (i<=midIndx){\n            arr[k]=auxArr[i]\n            animations.push([i,i]);\n            animations.push([i,arr[i]]);\n            animations.push([i,i]);\n\n\n            i++\n\n          \n            k++\n\n\n        }\n        \n        while (j<=endIndx){\n            arr[k]=auxArr[j]\n            animations.push([j,j]);\n            animations.push([j,arr[j]]);\n            animations.push([j,j]);\n\n            j++\n            \n            k++\n            \n        }\n        console.log(auxArr)\n    }\n}\n\n\n// export default function get_merge_sort_animations(array) {\n//     const animations = [];\n//     if (array.length <= 1) return array;\n//     const auxiliaryArray = array.slice();\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n//     console.log(auxiliaryArray)\n//     return animations;\n//   }\n  \n//   function mergeSortHelper(\n//     mainArray,\n//     startIdx,\n//     endIdx,\n//     auxiliaryArray,\n//     animations,\n//   ) {\n//     if (startIdx === endIdx) return;\n//     const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//     mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n//     mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n//     doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n//   }\n  \n//   function doMerge(\n//     mainArray,\n//     startIdx,\n//     middleIdx,\n//     endIdx,\n//     auxiliaryArray,\n//     animations,\n//   ) {\n//     let k = startIdx;\n//     let i = startIdx;\n//     let j = middleIdx + 1;\n//     while (i <= middleIdx && j <= endIdx) {\n//       // These are the values that we're comparing; we push them once\n//       // to change their color.\n//       animations.push([i, j]);\n//       // These are the values that we're comparing; we push them a second\n//       // time to revert their color.\n//       animations.push([i, j]);\n//       if (auxiliaryArray[i] > auxiliaryArray[j]) {\n//         // We overwrite the value at index k in the original array with the\n//         // value at index i in the auxiliary array.\n//         animations.push([k, auxiliaryArray[i]]);\n//         mainArray[k++] = auxiliaryArray[i++];\n//       } else {\n//         // We overwrite the value at index k in the original array with the\n//         // value at index j in the auxiliary array.\n//         animations.push([k, auxiliaryArray[j]]);\n//         mainArray[k++] = auxiliaryArray[j++];\n//       }\n//     }\n//     while (i <= middleIdx) {\n//       // These are the values that we're comparing; we push them once\n//       // to change their color.\n//       animations.push([i, i]);\n//       // These are the values that we're comparing; we push them a second\n//       // time to revert their color.\n//       animations.push([i, i]);\n//       // We overwrite the value at index k in the original array with the\n//       // value at index i in the auxiliary array.\n//       animations.push([k, auxiliaryArray[i]]);\n//       mainArray[k++] = auxiliaryArray[i++];\n//     }\n//     while (j <= endIdx) {\n//       // These are the values that we're comparing; we push them once\n//       // to change their color.\n//       animations.push([j, j]);\n//       // These are the values that we're comparing; we push them a second\n//       // time to revert their color.\n//       animations.push([j, j]);\n//       // We overwrite the value at index k in the original array with the\n//       // value at index j in the auxiliary array.\n//       animations.push([k, auxiliaryArray[j]]);\n//       mainArray[k++] = auxiliaryArray[j++];\n//     }\n//   }"]},"metadata":{},"sourceType":"module"}