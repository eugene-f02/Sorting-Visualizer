{"ast":null,"code":"var _jsxFileName = \"/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js\";\nimport React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './misc/generateBars.js';\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js';\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js';\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js';\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js';\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js';\nimport Slider from '@material-ui/core/Slider';\nconst ANIMATION_SPEED = 10;\nconst NUM_OF_BARS = 50;\n\nclass Bars extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      bars: generateBars(NUM_OF_BARS),\n      color: [],\n      lastTimeOutId: 6\n    };\n    this.state.resetBars = this.state.bars.slice();\n    this.state.color = Array(this.state.bars.length).fill('black');\n    this.sortBars = this.sortBars.bind(this);\n  }\n\n  renderBar(val, index) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      val: val,\n      color: this.state.color[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    });\n  }\n\n  get_animations(sortType) {\n    switch (sortType) {\n      case \"bubble\":\n        return get_bubble_sort_animations(this.state.bars.slice());\n\n      case \"merge\":\n        return get_merge_sort_animations(this.state.bars.slice());\n\n      case \"insert\":\n        return get_insertion_sort_animations(this.state.bars.slice());\n\n      case \"quick\":\n        return get_quick_sort_animations(this.state.bars.slice());\n\n      case \"heap\":\n        return get_heap_sort_animations(this.state.bars.slice());\n\n      default:\n        return;\n    }\n  }\n\n  clearTimouts() {\n    let newTimeoutId = window.setTimeout(function () {}, 0);\n    let copyNewTimeoutId = newTimeoutId;\n\n    while (this.state.lastTimeOutId < newTimeoutId) {\n      // clear all timeOuts\n      newTimeoutId--;\n      window.clearTimeout(newTimeoutId); // will do nothing if no timeout with id is present\n    }\n\n    this.setState({\n      lastTimeOutId: copyNewTimeoutId,\n      bars: this.state.resetBars,\n      color: Array(this.state.bars.length).fill('black')\n    });\n  }\n\n  generate_new_array() {\n    let newBars = generateBars(NUM_OF_BARS);\n    this.setState({\n      bars: newBars,\n      resetBars: newBars\n    });\n  }\n\n  sortBars(sortType) {\n    let copyBars = this.state.bars.slice();\n    let copyColor = this.state.color.slice();\n    let animations = [];\n    animations = this.get_animations(sortType);\n    console.log(animations.length);\n    animations.forEach((value, index) => {\n      if (index % 3 === 0) {\n        setTimeout(() => {\n          copyColor[value[0]] = `red`;\n          copyColor[value[1]] = `blue`;\n          this.setState({\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, ANIMATION_SPEED * index);\n      } else if (index % 3 === 1) {\n        setTimeout(() => {\n          if (sortType === \"merge\") {\n            copyBars[value[0]] = value[1];\n          } else {\n            swap(copyBars, value[0], value[1]);\n            copyColor[value[0]] = `green`;\n            copyColor[value[1]] = `green`;\n          }\n\n          this.setState({\n            bars: copyBars,\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, ANIMATION_SPEED * index + ANIMATION_SPEED / 2);\n      } else {\n        setTimeout(() => {\n          copyColor[value[0]] = `black`;\n          copyColor[value[1]] = `black`;\n          this.setState({\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, ANIMATION_SPEED * index + ANIMATION_SPEED);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.generate_new_array(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"quick\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"heap\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"merge\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"bubble\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"insert\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.clearTimouts(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => console.log(this.state),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"State\"), this.state.bars.map((val, index) => this.renderBar(val, index)), /*#__PURE__*/React.createElement(Slider, {\n      defaultValue: 80 // getAriaValueText={valuetext}\n      ,\n      \"aria-labelledby\": \"discrete-slider-always\",\n      step: 10 // marks={marks}\n      ,\n      valueLabelDisplay: \"on\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport function swap(arr, i, k) {\n  let temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\nexport default Bars;","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js"],"names":["React","Bar","generateBars","get_bubble_sort_animations","get_merge_sort_animations","get_insertion_sort_animations","get_quick_sort_animations","get_heap_sort_animations","Slider","ANIMATION_SPEED","NUM_OF_BARS","Bars","Component","constructor","state","bars","color","lastTimeOutId","resetBars","slice","Array","length","fill","sortBars","bind","renderBar","val","index","get_animations","sortType","clearTimouts","newTimeoutId","window","setTimeout","copyNewTimeoutId","clearTimeout","setState","generate_new_array","newBars","copyBars","copyColor","animations","console","log","forEach","value","swap","render","map","arr","i","k","temp"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './misc/generateBars.js'\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js'\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js'\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js'\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js'\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js'\nimport Slider from '@material-ui/core/Slider';\n\nconst ANIMATION_SPEED=10\nconst NUM_OF_BARS=50\n\nclass Bars extends React.Component{\n    constructor(){\n        super()\n        this.state={bars: generateBars(NUM_OF_BARS),color:[],lastTimeOutId:6}\n        this.state.resetBars=this.state.bars.slice()\n        this.state.color=Array(this.state.bars.length).fill('black')\n\n        this.sortBars=this.sortBars.bind(this)\n    }\n\n    renderBar(val,index){\n        return (\n        <Bar key={index} val={val} color={this.state.color[index]}/>\n        );\n    }\n    get_animations(sortType){\n        switch(sortType){\n            case \"bubble\": return get_bubble_sort_animations(this.state.bars.slice())\n            case \"merge\": return get_merge_sort_animations(this.state.bars.slice())\n            case \"insert\": return get_insertion_sort_animations(this.state.bars.slice())\n            case \"quick\": return get_quick_sort_animations(this.state.bars.slice())\n            case \"heap\": return get_heap_sort_animations(this.state.bars.slice())\n            default: return\n        }\n    }\n\n    clearTimouts(){\n        let newTimeoutId = window.setTimeout(function() {}, 0);\n        let copyNewTimeoutId = newTimeoutId\n        while (this.state.lastTimeOutId<newTimeoutId) { // clear all timeOuts\n            newTimeoutId--\n            window.clearTimeout(newTimeoutId); // will do nothing if no timeout with id is present\n        }\n        this.setState({lastTimeOutId: copyNewTimeoutId, bars: this.state.resetBars ,color: Array(this.state.bars.length).fill('black')})\n\n    }\n    generate_new_array(){\n        let newBars=generateBars(NUM_OF_BARS)\n        this.setState({bars:newBars,resetBars: newBars})\n    }\n\n    sortBars(sortType){\n        let copyBars=this.state.bars.slice()\n        let copyColor=this.state.color.slice()\n        let animations=[]\n\n        animations=this.get_animations(sortType)\n        console.log(animations.length)\n        animations.forEach( (value,index) =>{\n            if (index % 3 === 0){\n                setTimeout( () => {\n                    copyColor[value[0]]=`red`\n                    copyColor[value[1]]=`blue`\n                    this.setState({color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1}) // increasing lastTimeOutId so that clearTimouts() does less iterations\n                },ANIMATION_SPEED*index)\n            }\n            else if (index % 3 === 1 ){\n               setTimeout( () => {\n                    if (sortType === \"merge\"){\n                        copyBars[value[0]]=value[1]   \n                    }\n                    else{\n                        swap(copyBars,value[0],value[1])\n                        copyColor[value[0]]=`green`\n                        copyColor[value[1]]=`green`\n                    }\n                        \n                    this.setState({bars:copyBars,color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1})// increasing lastTimeOutId so that clearTimouts() does less iterations\n                },ANIMATION_SPEED*index+ANIMATION_SPEED/2)\n            }\n            else{\n                setTimeout( () => {\n                    copyColor[value[0]]=`black`\n                    copyColor[value[1]]=`black`\n                    this.setState({color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1})// increasing lastTimeOutId so that clearTimouts() does less iterations\n                }, ANIMATION_SPEED*index+ANIMATION_SPEED)\n            }\n            });\n    }\n\n    render(){\n        return(\n            <>\n            <button onClick={() => this.generate_new_array()}>Generate New Array</button>\n            <button onClick={() => this.sortBars(\"quick\")}>Quick Sort</button>\n            <button onClick={() => this.sortBars(\"heap\")}>Heap Sort</button>\n            <button onClick={() => this.sortBars(\"merge\")}>Merge Sort</button>\n            <button onClick={() => this.sortBars(\"bubble\")}>Bubble Sort</button>\n            <button onClick={() => this.sortBars(\"insert\")}>Insertion Sort</button>\n            <button onClick={() => this.clearTimouts()}>Stop</button>\n            <button onClick={() => console.log(this.state)}>State</button>\n            {this.state.bars.map( (val,index) => this.renderBar(val,index))}\n            <Slider\n                defaultValue={80}\n                // getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider-always\"\n                step={10}\n                // marks={marks}\n                valueLabelDisplay=\"on\"\n            />\n\n            </>\n        );\n    }\n}\nexport function swap(arr,i,k){\n    let temp=arr[i]\n    arr[i]=arr[k]\n    arr[k]=temp\n}\n\nexport default Bars\n"]},"metadata":{},"sourceType":"module"}