{"ast":null,"code":"var _jsxFileName = \"/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js\";\nimport React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './misc/generateBars.js';\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js';\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js';\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js';\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js';\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js';\nimport Timer from './Timer.js';\nimport $ from 'jquery';\nconst ORIGINAL_AMOUNT_OF_BARS = Math.floor(window.innerWidth / 50);\nconst MAX_SPEED = 150;\nconst MIN_SPEED = 10;\n\nclass Bars extends React.Component {\n  constructor() {\n    super();\n\n    this.adjustNumberOfBars = () => {\n      let win = window.innerWidth;\n      let max = Math.floor(win / 25 * 0.9);\n      let min = Math.floor(win / 25 * 0.25);\n\n      if (this.state.num_of_bars > max) {\n        this.StopOrReset();\n        let copyBars = this.state.resetBars.slice();\n\n        while (copyBars.length > max) {\n          copyBars.pop();\n        }\n\n        this.setState({\n          bars: copyBars,\n          resetBars: copyBars,\n          color: Array(copyBars.length).fill('grey'),\n          num_of_bars: copyBars.length\n        });\n      }\n\n      console.log(win);\n      $(\"#barSlider\").attr({\n        \"max\": max < 2 ? 2 : max,\n        \"min\": min < 2 ? 2 : min\n      });\n    };\n\n    this.state = {\n      bars: generateBars(ORIGINAL_AMOUNT_OF_BARS),\n      color: [],\n      lastTimeOutId: 6,\n      animation_speed: MAX_SPEED,\n      num_of_bars: ORIGINAL_AMOUNT_OF_BARS.toString(),\n      sorted: false,\n      time: 0,\n      start: 0,\n      isTimerOn: false\n    };\n    this.state.resetBars = this.state.bars.slice();\n    this.state.color = Array(this.state.bars.length).fill('grey');\n    this.sortBars = this.sortBars.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.adjustNumberOfBars);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.adjustNumberOfBars);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === 'num_of_bars') {\n      this.resetTimer();\n\n      function changedBars(state) {\n        let copyBars = state.bars.slice();\n        let copyColor = state.color.slice();\n        let copyResetBars = state.resetBars.slice();\n\n        if (value > state.bars.length) {\n          for (let i = state.bars.length; i < value; i++) {\n            let rndNum = Math.floor(Math.random() * 680 + 100);\n            copyBars.push(rndNum);\n            copyColor.push('grey');\n            copyResetBars.push(rndNum);\n          }\n        } else {\n          for (let i = state.bars.length; i > value; i--) {\n            copyBars.pop();\n            copyColor.pop();\n            copyResetBars.pop();\n          }\n        }\n\n        return {\n          sorted: false,\n          bars: copyBars,\n          color: copyColor,\n          resetBars: copyResetBars\n        };\n      }\n\n      this.setState({\n        bars: this.state.resetBars.slice()\n      }, () => this.setState(changedBars(this.state)));\n    }\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  renderBar(val, index) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      val: val,\n      color: this.state.color[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    });\n  }\n\n  get_animations(sortType) {\n    switch (sortType) {\n      case \"bubble\":\n        return get_bubble_sort_animations(this.state.bars.slice());\n\n      case \"merge\":\n        return get_merge_sort_animations(this.state.bars.slice());\n\n      case \"insert\":\n        return get_insertion_sort_animations(this.state.bars.slice());\n\n      case \"quick\":\n        return get_quick_sort_animations(this.state.bars.slice());\n\n      case \"heap\":\n        return get_heap_sort_animations(this.state.bars.slice());\n\n      default:\n        return;\n    }\n  }\n\n  StopOrReset() {\n    this.resetTimer();\n    if (this.state.sorted) this.setState({\n      sorted: false,\n      bars: this.state.resetBars\n    });else {\n      if (this.state.isTimerOn) this.stopTimer();\n      let newTimeoutId = window.setTimeout(function () {}, 0);\n      let copyNewTimeoutId = newTimeoutId;\n\n      while (this.state.lastTimeOutId < newTimeoutId) {\n        // clear all timeOuts\n        newTimeoutId--;\n        window.clearTimeout(newTimeoutId); // will do nothing if no timeout with id is present\n      }\n\n      this.setState({\n        sorted: false,\n        lastTimeOutId: copyNewTimeoutId,\n        bars: this.state.resetBars,\n        color: Array(this.state.bars.length).fill('grey')\n      });\n    }\n  }\n\n  generate_new_array() {\n    this.resetTimer();\n    let newBars = generateBars(this.state.num_of_bars);\n    this.setState({\n      bars: newBars,\n      resetBars: newBars,\n      sorted: false\n    });\n  }\n\n  startTimer() {\n    this.setState({\n      time: this.state.time,\n      start: Date.now() - this.state.time,\n      isTimerOn: true\n    });\n    this.timer = setInterval(() => this.setState({\n      time: Date.now() - this.state.start\n    }), 1);\n  }\n\n  stopTimer() {\n    this.setState({\n      isTimerOn: false\n    });\n    clearInterval(this.timer);\n  }\n\n  resetTimer() {\n    this.setState({\n      time: 0\n    });\n  }\n\n  sortBars(sortType) {\n    if (this.state.sorted === true) {\n      //green animation at the end\n      let i = 0;\n\n      for (i; i < this.state.color.length; i++) {\n        let loopCounter = i;\n        setTimeout(() => {\n          this.setState(prevState => {\n            let color = prevState.color.map((value, index) => {\n              if (index === loopCounter) return '#32cd32';else return value;\n            });\n            return {\n              color\n            };\n          });\n        }, i * 35);\n      }\n\n      setTimeout(() => this.setState({\n        color: Array(this.state.color.length).fill('grey')\n      }), (i + 1) * 35 + 500);\n      return;\n    }\n\n    this.startTimer();\n    let copyBars = this.state.bars.slice();\n    let copyColor = this.state.color.slice();\n    let actualAnimationSpeed = MAX_SPEED + MIN_SPEED - this.state.animation_speed;\n    let animations = [];\n    animations = this.get_animations(sortType);\n    animations.forEach((value, index) => {\n      if (index % 3 === 0) {\n        setTimeout(() => {\n          copyColor[value[0]] = `red`;\n          copyColor[value[1]] = `blue`;\n          this.setState({\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, actualAnimationSpeed * index);\n      } else if (index % 3 === 1) {\n        setTimeout(() => {\n          if (sortType === \"merge\") {\n            copyBars[value[0]] = value[1];\n          } else {\n            swap(copyBars, value[0], value[1]);\n            copyColor[value[0]] = `turquoise`;\n            copyColor[value[1]] = `turquoise`;\n          }\n\n          this.setState({\n            bars: copyBars,\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, actualAnimationSpeed * index);\n      } else {\n        setTimeout(() => {\n          copyColor[value[0]] = `grey`;\n          copyColor[value[1]] = `grey`;\n          this.setState({\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, actualAnimationSpeed * index);\n      }\n\n      if (index === animations.length - 1) {\n        setTimeout(() => {\n          this.setState({\n            sorted: true\n          });\n          this.stopTimer();\n          this.sortBars();\n        }, actualAnimationSpeed * (index + 1));\n      }\n    });\n  }\n\n  render() {\n    let max = Math.floor(window.innerWidth / 25 * 0.9);\n    let min = Math.floor(window.innerWidth / 25 * 0.25);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"horizontalCenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"style\",\n      id: \"generate_new_array\",\n      onClick: () => this.generate_new_array(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"quick\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"heap\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"merge\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"bubble\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"insert\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => console.log(this.state),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, \"State\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"sliderContainer\",\n      className: \"horizontalCenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, \"Speed: \"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"slider\",\n      type: \"range\",\n      min: MIN_SPEED,\n      max: MAX_SPEED,\n      value: this.state.animation_speed,\n      name: \"animation_speed\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"stop\",\n      onClick: () => this.StopOrReset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }, this.state.sorted ? \"Reset\" : \"Stop\"), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        backgroundColor: \"green\",\n        width: \"20%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }\n    }, \"Bars: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 34\n      }\n    }), this.state.num_of_bars), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"slider\",\n      id: \"barSlider\",\n      type: \"range\",\n      min: min < 2 ? 2 : min,\n      max: max < 2 ? 2 : max,\n      value: this.state.num_of_bars,\n      name: \"num_of_bars\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Timer, {\n      time: this.state.time,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"barContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }\n    }, this.state.bars.map((val, index) => this.renderBar(val, index))));\n  }\n\n}\n\nexport function swap(arr, i, k) {\n  let temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\nexport default Bars;","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js"],"names":["React","Bar","generateBars","get_bubble_sort_animations","get_merge_sort_animations","get_insertion_sort_animations","get_quick_sort_animations","get_heap_sort_animations","Timer","$","ORIGINAL_AMOUNT_OF_BARS","Math","floor","window","innerWidth","MAX_SPEED","MIN_SPEED","Bars","Component","constructor","adjustNumberOfBars","win","max","min","state","num_of_bars","StopOrReset","copyBars","resetBars","slice","length","pop","setState","bars","color","Array","fill","console","log","attr","lastTimeOutId","animation_speed","toString","sorted","time","start","isTimerOn","sortBars","bind","handleChange","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","event","name","value","target","resetTimer","changedBars","copyColor","copyResetBars","i","rndNum","random","push","renderBar","val","index","get_animations","sortType","stopTimer","newTimeoutId","setTimeout","copyNewTimeoutId","clearTimeout","generate_new_array","newBars","startTimer","Date","now","timer","setInterval","clearInterval","loopCounter","prevState","map","actualAnimationSpeed","animations","forEach","swap","render","backgroundColor","width","arr","k","temp"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './misc/generateBars.js'\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js'\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js'\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js'\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js'\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js'\nimport Timer from './Timer.js'\n\nimport $ from 'jquery'\n\nconst ORIGINAL_AMOUNT_OF_BARS=Math.floor(window.innerWidth/50)\nconst MAX_SPEED=150\nconst MIN_SPEED=10\n\nclass Bars extends React.Component{\n    constructor(){\n        super()\n        this.state={bars: generateBars(ORIGINAL_AMOUNT_OF_BARS),color:[],lastTimeOutId:6,animation_speed:MAX_SPEED,num_of_bars:ORIGINAL_AMOUNT_OF_BARS.toString(),sorted:false,time: 0,\n        start: 0,isTimerOn: false}\n        this.state.resetBars=this.state.bars.slice()\n        this.state.color=Array(this.state.bars.length).fill('grey')\n\n        this.sortBars=this.sortBars.bind(this)\n        this.handleChange=this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.adjustNumberOfBars);\n      }\n      componentWillUnmount() {\n        window.removeEventListener('resize', this.adjustNumberOfBars);\n      }\n\n    adjustNumberOfBars = () => {\n       \n        let win = window.innerWidth\n        let max =Math.floor(win/25*0.9)\n        let min= Math.floor(win/25*0.25)\n        if (this.state.num_of_bars>max){\n            this.StopOrReset()\n            let copyBars= this.state.resetBars.slice()\n            while (copyBars.length>max){\n                copyBars.pop()\n            }\n            this.setState({bars: copyBars,resetBars: copyBars,color:Array(copyBars.length).fill('grey'),num_of_bars:copyBars.length})\n        }\n        console.log(win)\n        $(\"#barSlider\").attr({\"max\": max<2 ? 2: max ,\"min\": min<2 ? 2: min})\n      };\n\n\n    handleChange(event) {\n        const {name, value} = event.target\n        if (name ==='num_of_bars'){\n\n            this.resetTimer()\n\n            function changedBars(state){\n\n\n                let copyBars=state.bars.slice()\n                let copyColor=state.color.slice()\n                let copyResetBars=state.resetBars.slice()\n    \n    \n                if (value > state.bars.length){\n                    for(let i = state.bars.length;i<value;i++){\n                            let rndNum=Math.floor(Math.random()*680+100)\n                            copyBars.push(rndNum);\n                            copyColor.push('grey')\n                            copyResetBars.push(rndNum)\n                    }\n                }\n                else{\n                    for(let i = state.bars.length;i>value;i--){\n                        copyBars.pop()\n                        copyColor.pop()\n                        copyResetBars.pop()\n                    }\n                }\n                return {sorted:false,bars:copyBars,color:copyColor,resetBars:copyResetBars}\n            }\n\n\n            this.setState({bars: this.state.resetBars.slice()},() => this.setState(changedBars(this.state)))\n  \n\n        }\n            this.setState({\n                [name]: value\n            })\n    }\n\n    renderBar(val,index){\n        return (\n        <Bar key={index} val={val} color={this.state.color[index]}/>\n        );\n    }\n    get_animations(sortType){\n        switch(sortType){\n            case \"bubble\": return get_bubble_sort_animations(this.state.bars.slice())\n            case \"merge\": return get_merge_sort_animations(this.state.bars.slice())\n            case \"insert\": return get_insertion_sort_animations(this.state.bars.slice())\n            case \"quick\": return get_quick_sort_animations(this.state.bars.slice())\n            case \"heap\": return get_heap_sort_animations(this.state.bars.slice())\n            default: return\n        }\n    }\n\n    StopOrReset(){\n        this.resetTimer()\n        if (this.state.sorted)this.setState({sorted:false,bars: this.state.resetBars})\n        else{\n            if (this.state.isTimerOn) this.stopTimer()\n            let newTimeoutId = window.setTimeout(function() {}, 0);\n            let copyNewTimeoutId = newTimeoutId\n            while (this.state.lastTimeOutId<newTimeoutId) { // clear all timeOuts\n                newTimeoutId--\n                window.clearTimeout(newTimeoutId); // will do nothing if no timeout with id is present\n            }\n            this.setState({sorted:false,lastTimeOutId: copyNewTimeoutId, bars: this.state.resetBars ,color: Array(this.state.bars.length).fill('grey')})\n        }\n    }\n\n    generate_new_array(){\n        this.resetTimer()\n        let newBars=generateBars(this.state.num_of_bars)\n        this.setState({bars:newBars,resetBars: newBars,sorted:false})\n    }\n\n    startTimer() {\n        this.setState({\n          time: this.state.time,\n          start: Date.now() - this.state.time,\n          isTimerOn: true\n        })\n        this.timer = setInterval(() => this.setState({\n          time: Date.now() - this.state.start\n        }), 1);\n      }\n\n        \n    stopTimer() {\n        this.setState({isTimerOn: false})\n        clearInterval(this.timer)\n    }\n\n    resetTimer() {\n        this.setState({time: 0})\n    }\n\n    sortBars(sortType){\n\n\n        if (this.state.sorted===true){ //green animation at the end\n            let i=0\n            for (i;i<this.state.color.length;i++){\n                let loopCounter=i\n                setTimeout( () => {\n                    this.setState( prevState => {\n                    let color= prevState.color.map( (value,index) =>{\n                        if (index===loopCounter) return '#32cd32'\n                        else return value\n                    })\n                    return {color}\n                })},i*35)\n            }\n            setTimeout( () => this.setState({color:Array(this.state.color.length).fill('grey')}),(i+1)*35+500)\n            return;\n        }\n\n        this.startTimer()\n\n\n        let copyBars=this.state.bars.slice()\n        let copyColor=this.state.color.slice()\n        let actualAnimationSpeed=MAX_SPEED+MIN_SPEED-this.state.animation_speed\n        let animations=[]\n\n        animations=this.get_animations(sortType)\n        animations.forEach( (value,index) =>{\n            if (index % 3 === 0){\n                setTimeout( () => {\n                    copyColor[value[0]]=`red`\n                    copyColor[value[1]]=`blue`\n                    this.setState({color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1}) // increasing lastTimeOutId so that clearTimouts() does less iterations\n                },actualAnimationSpeed*index)\n            }\n            else if (index % 3 === 1 ){\n               setTimeout( () => {\n                    if (sortType === \"merge\"){\n                        copyBars[value[0]]=value[1]   \n                    }\n                    else{\n                        swap(copyBars,value[0],value[1])\n                        copyColor[value[0]]=`turquoise`\n                        copyColor[value[1]]=`turquoise`\n                    }\n                        \n                    this.setState({bars:copyBars,color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1})// increasing lastTimeOutId so that clearTimouts() does less iterations\n                },actualAnimationSpeed*index)\n            }\n            else{\n                setTimeout( () => {\n                    copyColor[value[0]]=`grey`\n                    copyColor[value[1]]=`grey`\n                    this.setState({color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1})// increasing lastTimeOutId so that clearTimouts() does less iterations\n                }, actualAnimationSpeed*index)\n            }\n            if (index===animations.length-1){\n                setTimeout( () => {\n                    this.setState({sorted:true})\n                    this.stopTimer()\n                    this.sortBars()\n                },actualAnimationSpeed*(index+1))\n\n            }\n            });\n    }\n\n    render(){\n        let max =Math.floor(window.innerWidth/25*0.9)\n        let min=Math.floor(window.innerWidth/25*0.25)\n        return(\n            <>\n            <header>\n            <div className='horizontalCenter'>\n            <button className=\"style\" id=\"generate_new_array\" onClick={() => this.generate_new_array()}>Generate New Array</button>\n            <button onClick={() => this.sortBars(\"quick\")}>Quick Sort</button>\n            <button onClick={() => this.sortBars(\"heap\")}>Heap Sort</button>\n            <button onClick={() => this.sortBars(\"merge\")}>Merge Sort</button>\n            <button onClick={() => this.sortBars(\"bubble\")}>Bubble Sort</button>\n            <button onClick={() => this.sortBars(\"insert\")}>Insertion Sort</button>\n            <button onClick={() => console.log(this.state)}>State</button>\n            </div>\n\n            <div id='sliderContainer' className='horizontalCenter'>\n            <label>Speed: </label>\n            <input className=\"slider\"\n                    type=\"range\" \n                    min={MIN_SPEED} max={MAX_SPEED} value={this.state.animation_speed}\n                    name=\"animation_speed\" \n                    onChange={this.handleChange} \n            />\n            <button id=\"stop\" onClick={() => this.StopOrReset()}>{this.state.sorted ? \"Reset\" : \"Stop\"}</button>\n                <span style={{backgroundColor:\"green\",width:\"20%\"}}>\n                    <label>Bars: <br></br>{this.state.num_of_bars}</label>\n                    <input className=\"slider\" id='barSlider'\n                            type=\"range\" \n                            min={min<2 ? 2: min} max={max<2 ? 2: max} value={this.state.num_of_bars}\n                            name=\"num_of_bars\" \n                            onChange={this.handleChange} \n                    />\n                </span>\n            </div>\n            <Timer time={this.state.time}/>\n            </header>\n            <div id='barContainer'>\n            {this.state.bars.map( (val,index) => this.renderBar(val,index))}  \n            </div>\n            </>\n\n        );\n    }\n}\nexport function swap(arr,i,k){\n    let temp=arr[i]\n    arr[i]=arr[k]\n    arr[k]=temp\n}\n\nexport default Bars\n"]},"metadata":{},"sourceType":"module"}