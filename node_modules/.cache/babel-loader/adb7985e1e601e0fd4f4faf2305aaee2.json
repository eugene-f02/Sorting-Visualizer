{"ast":null,"code":"var _jsxFileName = \"/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js\";\nimport React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './misc/generateBars.js';\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js';\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js';\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js';\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js';\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js';\nimport Timer from './Timer.js';\n\nclass Bars extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      bars: generateBars(20),\n      color: [],\n      lastTimeOutId: 6,\n      animation_speed: \"10\",\n      num_of_bars: \"20\",\n      sorted: false,\n      time: 0,\n      start: 0,\n      isTimerOn: false\n    };\n    this.state.resetBars = this.state.bars.slice();\n    this.state.color = Array(this.state.bars.length).fill('black');\n    this.sortBars = this.sortBars.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.Timer = Timer.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === 'num_of_bars') {\n      this.resetTimer();\n\n      function changedBars(state) {\n        let copyBars = state.bars.slice();\n        let copyColor = state.color.slice();\n        let copyResetBars = state.resetBars.slice();\n\n        if (value > state.bars.length) {\n          for (let i = state.bars.length; i < value; i++) {\n            let rndNum = Math.floor(Math.random() * 800 + 100);\n            copyBars.push(rndNum);\n            copyColor.push('black');\n            copyResetBars.push(rndNum);\n          }\n        } else {\n          for (let i = state.bars.length; i > value; i--) {\n            copyBars.pop();\n            copyColor.pop();\n            copyResetBars.pop();\n          }\n        }\n\n        return {\n          sorted: false,\n          bars: copyBars,\n          color: copyColor,\n          resetBars: copyResetBars\n        };\n      }\n\n      this.setState({\n        bars: this.state.resetBars.slice()\n      }, () => this.setState(changedBars(this.state)));\n    }\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  renderBar(val, index) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      val: val,\n      color: this.state.color[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    });\n  }\n\n  get_animations(sortType) {\n    switch (sortType) {\n      case \"bubble\":\n        return get_bubble_sort_animations(this.state.bars.slice());\n\n      case \"merge\":\n        return get_merge_sort_animations(this.state.bars.slice());\n\n      case \"insert\":\n        return get_insertion_sort_animations(this.state.bars.slice());\n\n      case \"quick\":\n        return get_quick_sort_animations(this.state.bars.slice());\n\n      case \"heap\":\n        return get_heap_sort_animations(this.state.bars.slice());\n\n      default:\n        return;\n    }\n  }\n\n  StopOrReset() {\n    this.resetTimer();\n    if (this.state.sorted) this.setState({\n      sorted: false,\n      bars: this.state.resetBars\n    });else {\n      if (this.state.isTimerOn) this.stopTimer();\n      let newTimeoutId = window.setTimeout(function () {}, 0);\n      let copyNewTimeoutId = newTimeoutId;\n\n      while (this.state.lastTimeOutId < newTimeoutId) {\n        // clear all timeOuts\n        newTimeoutId--;\n        window.clearTimeout(newTimeoutId); // will do nothing if no timeout with id is present\n      }\n\n      this.setState({\n        sorted: false,\n        lastTimeOutId: copyNewTimeoutId,\n        bars: this.state.resetBars,\n        color: Array(this.state.bars.length).fill('black')\n      });\n    }\n  }\n\n  generate_new_array() {\n    this.resetTimer();\n    let newBars = generateBars(this.state.num_of_bars);\n    this.setState({\n      bars: newBars,\n      resetBars: newBars,\n      sorted: false\n    });\n  }\n\n  startTimer() {\n    this.setState({\n      time: this.state.time,\n      start: Date.now() - this.state.time,\n      isTimerOn: true\n    });\n    this.timer = setInterval(() => this.setState({\n      time: Date.now() - this.state.start\n    }), 1);\n  }\n\n  stopTimer() {\n    this.setState({\n      isTimerOn: false\n    });\n    clearInterval(this.timer);\n  }\n\n  resetTimer() {\n    this.setState({\n      time: 0\n    });\n  }\n\n  sortBars(sortType) {\n    if (this.state.sorted === true) {\n      //green animation at the end\n      let i = 0;\n\n      for (i; i < this.state.color.length; i++) {\n        let loopCounter = i;\n        setTimeout(() => {\n          this.setState(prevState => {\n            let color = prevState.color.map((value, index) => {\n              if (index === loopCounter) return '#32cd32';else return value;\n            });\n            return {\n              color\n            };\n          });\n        }, i * 35);\n      }\n\n      setTimeout(() => this.setState({\n        color: Array(this.state.color.length).fill('black')\n      }), (i + 1) * 35 + 500);\n      return;\n    }\n\n    this.startTimer();\n    let copyBars = this.state.bars.slice();\n    let copyColor = this.state.color.slice();\n    let animations = [];\n    animations = this.get_animations(sortType);\n    animations.forEach((value, index) => {\n      if (index % 3 === 0) {\n        setTimeout(() => {\n          copyColor[value[0]] = `red`;\n          copyColor[value[1]] = `blue`;\n          this.setState({\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, this.state.animation_speed * index);\n      } else if (index % 3 === 1) {\n        setTimeout(() => {\n          if (sortType === \"merge\") {\n            copyBars[value[0]] = value[1];\n          } else {\n            swap(copyBars, value[0], value[1]);\n            copyColor[value[0]] = `turquoise`;\n            copyColor[value[1]] = `turquoise`;\n          }\n\n          this.setState({\n            bars: copyBars,\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, this.state.animation_speed * index);\n      } else {\n        setTimeout(() => {\n          copyColor[value[0]] = `black`;\n          copyColor[value[1]] = `black`;\n          this.setState({\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, this.state.animation_speed * index);\n      }\n\n      if (index === animations.length - 1) {\n        setTimeout(() => {\n          this.setState({\n            sorted: true\n          });\n          this.stopTimer();\n          this.sortBars();\n        }, this.state.animation_speed * (index + 1));\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.generate_new_array(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"quick\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"heap\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"merge\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"bubble\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"insert\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.StopOrReset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, this.state.sorted ? \"Reset\" : \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => console.log(this.state),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"5\",\n      max: \"200\",\n      value: this.state.animation_speed,\n      name: \"animation_speed\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"10\",\n      max: \"100\",\n      value: this.state.num_of_bars,\n      name: \"num_of_bars\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Timer, {\n      time: this.state.time,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    })), this.state.bars.map((val, index) => this.renderBar(val, index)));\n  }\n\n}\n\nexport function swap(arr, i, k) {\n  let temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\nexport default Bars;","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js"],"names":["React","Bar","generateBars","get_bubble_sort_animations","get_merge_sort_animations","get_insertion_sort_animations","get_quick_sort_animations","get_heap_sort_animations","Timer","Bars","Component","constructor","state","bars","color","lastTimeOutId","animation_speed","num_of_bars","sorted","time","start","isTimerOn","resetBars","slice","Array","length","fill","sortBars","bind","handleChange","event","name","value","target","resetTimer","changedBars","copyBars","copyColor","copyResetBars","i","rndNum","Math","floor","random","push","pop","setState","renderBar","val","index","get_animations","sortType","StopOrReset","stopTimer","newTimeoutId","window","setTimeout","copyNewTimeoutId","clearTimeout","generate_new_array","newBars","startTimer","Date","now","timer","setInterval","clearInterval","loopCounter","prevState","map","animations","forEach","swap","render","console","log","arr","k","temp"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './misc/generateBars.js'\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js'\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js'\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js'\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js'\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js'\nimport Timer from './Timer.js'\n\n\nclass Bars extends React.Component{\n    constructor(){\n        super()\n        this.state={bars: generateBars(20),color:[],lastTimeOutId:6,animation_speed:\"10\",num_of_bars:\"20\",sorted:false,time: 0,\n        start: 0,isTimerOn: false}\n        this.state.resetBars=this.state.bars.slice()\n        this.state.color=Array(this.state.bars.length).fill('black')\n\n        this.sortBars=this.sortBars.bind(this)\n        this.handleChange=this.handleChange.bind(this)\n        this.Timer=Timer.bind(this)\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        if (name ==='num_of_bars'){\n\n            this.resetTimer()\n\n            function changedBars(state){\n\n\n                let copyBars=state.bars.slice()\n                let copyColor=state.color.slice()\n                let copyResetBars=state.resetBars.slice()\n    \n    \n                if (value > state.bars.length){\n                    for(let i = state.bars.length;i<value;i++){\n                            let rndNum=Math.floor(Math.random()*800+100)\n                            copyBars.push(rndNum);\n                            copyColor.push('black')\n                            copyResetBars.push(rndNum)\n                    }\n                }\n                else{\n                    for(let i = state.bars.length;i>value;i--){\n                        copyBars.pop()\n                        copyColor.pop()\n                        copyResetBars.pop()\n                    }\n                }\n                return {sorted:false,bars:copyBars,color:copyColor,resetBars:copyResetBars}\n            }\n\n\n            this.setState({bars: this.state.resetBars.slice()},() => this.setState(changedBars(this.state)))\n  \n\n        }\n\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    renderBar(val,index){\n        return (\n        <Bar key={index} val={val} color={this.state.color[index]}/>\n        );\n    }\n    get_animations(sortType){\n        switch(sortType){\n            case \"bubble\": return get_bubble_sort_animations(this.state.bars.slice())\n            case \"merge\": return get_merge_sort_animations(this.state.bars.slice())\n            case \"insert\": return get_insertion_sort_animations(this.state.bars.slice())\n            case \"quick\": return get_quick_sort_animations(this.state.bars.slice())\n            case \"heap\": return get_heap_sort_animations(this.state.bars.slice())\n            default: return\n        }\n    }\n\n    StopOrReset(){\n        this.resetTimer()\n        if (this.state.sorted)this.setState({sorted:false,bars: this.state.resetBars})\n        else{\n            if (this.state.isTimerOn) this.stopTimer()\n            let newTimeoutId = window.setTimeout(function() {}, 0);\n            let copyNewTimeoutId = newTimeoutId\n            while (this.state.lastTimeOutId<newTimeoutId) { // clear all timeOuts\n                newTimeoutId--\n                window.clearTimeout(newTimeoutId); // will do nothing if no timeout with id is present\n            }\n            this.setState({sorted:false,lastTimeOutId: copyNewTimeoutId, bars: this.state.resetBars ,color: Array(this.state.bars.length).fill('black')})\n        }\n    }\n\n    generate_new_array(){\n        this.resetTimer()\n        let newBars=generateBars(this.state.num_of_bars)\n        this.setState({bars:newBars,resetBars: newBars,sorted:false})\n    }\n\n    startTimer() {\n        this.setState({\n          time: this.state.time,\n          start: Date.now() - this.state.time,\n          isTimerOn: true\n        })\n        this.timer = setInterval(() => this.setState({\n          time: Date.now() - this.state.start\n        }), 1);\n      }\n\n        \n    stopTimer() {\n        this.setState({isTimerOn: false})\n        clearInterval(this.timer)\n    }\n\n    resetTimer() {\n        this.setState({time: 0})\n    }\n\n    sortBars(sortType){\n\n\n        if (this.state.sorted===true){ //green animation at the end\n            let i=0\n            for (i;i<this.state.color.length;i++){\n                let loopCounter=i\n                setTimeout( () => {\n                    this.setState( prevState => {\n                    let color= prevState.color.map( (value,index) =>{\n                        if (index===loopCounter) return '#32cd32'\n                        else return value\n                    })\n                    return {color}\n                })},i*35)\n            }\n            setTimeout( () => this.setState({color:Array(this.state.color.length).fill('black')}),(i+1)*35+500)\n            return;\n        }\n\n        this.startTimer()\n\n\n        let copyBars=this.state.bars.slice()\n        let copyColor=this.state.color.slice()\n        let animations=[]\n\n        animations=this.get_animations(sortType)\n        animations.forEach( (value,index) =>{\n            if (index % 3 === 0){\n                setTimeout( () => {\n                    copyColor[value[0]]=`red`\n                    copyColor[value[1]]=`blue`\n                    this.setState({color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1}) // increasing lastTimeOutId so that clearTimouts() does less iterations\n                },this.state.animation_speed*index)\n            }\n            else if (index % 3 === 1 ){\n               setTimeout( () => {\n                    if (sortType === \"merge\"){\n                        copyBars[value[0]]=value[1]   \n                    }\n                    else{\n                        swap(copyBars,value[0],value[1])\n                        copyColor[value[0]]=`turquoise`\n                        copyColor[value[1]]=`turquoise`\n                    }\n                        \n                    this.setState({bars:copyBars,color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1})// increasing lastTimeOutId so that clearTimouts() does less iterations\n                },this.state.animation_speed*index)\n            }\n            else{\n                setTimeout( () => {\n                    copyColor[value[0]]=`black`\n                    copyColor[value[1]]=`black`\n                    this.setState({color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1})// increasing lastTimeOutId so that clearTimouts() does less iterations\n                }, this.state.animation_speed*index)\n            }\n            if (index===animations.length-1){\n                setTimeout( () => {\n                    this.setState({sorted:true})\n                    this.stopTimer()\n                    this.sortBars()\n                },this.state.animation_speed*(index+1))\n\n            }\n            });\n    }\n\n    render(){\n        return(\n            <>\n             <div>\n            <button onClick={() => this.generate_new_array()}>Generate New Array</button>\n            <button onClick={() => this.sortBars(\"quick\")}>Quick Sort</button>\n            <button onClick={() => this.sortBars(\"heap\")}>Heap Sort</button>\n            <button onClick={() => this.sortBars(\"merge\")}>Merge Sort</button>\n            <button onClick={() => this.sortBars(\"bubble\")}>Bubble Sort</button>\n            <button onClick={() => this.sortBars(\"insert\")}>Insertion Sort</button>\n            <button onClick={() => this.StopOrReset()}>{this.state.sorted ? \"Reset\" : \"Stop\"}</button>\n            <button onClick={() => console.log(this.state)}>State</button>\n            <input \n                    type=\"range\" \n                    min=\"5\" max=\"200\" value={this.state.animation_speed}\n                    name=\"animation_speed\" \n                    onChange={this.handleChange} \n            />\n              <input \n                    type=\"range\" \n                    min=\"10\" max=\"100\" value={this.state.num_of_bars}\n                    name=\"num_of_bars\" \n                    onChange={this.handleChange} \n            />\n            <Timer time={this.state.time}/>\n            </div>\n            {this.state.bars.map( (val,index) => this.renderBar(val,index))}\n            </>\n\n        );\n    }\n}\nexport function swap(arr,i,k){\n    let temp=arr[i]\n    arr[i]=arr[k]\n    arr[k]=temp\n}\n\nexport default Bars\n"]},"metadata":{},"sourceType":"module"}