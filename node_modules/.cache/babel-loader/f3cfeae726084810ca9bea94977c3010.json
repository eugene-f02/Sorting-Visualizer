{"ast":null,"code":"export default function heap_sort_animations(arr) {\n  let animations = [];\n  console.log(arr);\n  let n = arr.length;\n\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(arr, n, i, animations);\n  }\n\n  console.log(arr);\n\n  for (let i = n - 1; i > 0; i--) {\n    // Move current root to end \n    swap(arr, 0, i); // call max heapify on the reduced heap \n\n    heapify(arr, i, 0);\n  }\n\n  console.log(arr); // return animations\n}\n\nfunction heapify(arr, n, i, animations) {\n  let largest = i;\n  let l = 2 * i + 1;\n  let r = 2 * i + 2; // If left child is larger than root \n\n  if (l < n && arr[l] > arr[largest]) largest = l; // If right child is larger than largest so far \n\n  if (r < n && arr[r] > arr[largest]) largest = r; // If largest is not root \n\n  if (largest != i) {\n    swap(arr, i, largest, animations); // Recursively heapify the affected sub-tree \n\n    heapify(arr, n, largest, animations);\n  }\n\n  console.log(\"asd\", arr);\n}\n\nfunction swap(arr, i, k, animations) {\n  let temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n  animations.push([i, k]);\n  animations.push([i, k]);\n  animations.push([i, k]);\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/heap_sort.js"],"names":["heap_sort_animations","arr","animations","console","log","n","length","i","Math","floor","heapify","swap","largest","l","r","k","temp","push"],"mappings":"AAAA,eAAe,SAASA,oBAAT,CAA8BC,GAA9B,EAAkC;AAC7C,MAAIC,UAAU,GAAC,EAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAEA,MAAII,CAAC,GAAEJ,GAAG,CAACK,MAAX;;AACA,OAAK,IAAIC,CAAC,GAACC,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAC,CAAb,IAAgB,CAA3B,EAA6BE,CAAC,IAAE,CAAhC,EAAkCA,CAAC,EAAnC,EAAsC;AAClCG,IAAAA,OAAO,CAACT,GAAD,EAAKI,CAAL,EAAOE,CAAP,EAASL,UAAT,CAAP;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AAEA,OAAK,IAAIM,CAAC,GAACF,CAAC,GAAC,CAAb,EAAgBE,CAAC,GAAC,CAAlB,EAAqBA,CAAC,EAAtB,EACA;AACI;AACCI,IAAAA,IAAI,CAACV,GAAD,EAAK,CAAL,EAAOM,CAAP,CAAJ,CAFL,CAGI;;AACAG,IAAAA,OAAO,CAACT,GAAD,EAAMM,CAAN,EAAS,CAAT,CAAP;AACH;;AACDJ,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAjB6C,CAkB7C;AACH;;AAED,SAASS,OAAT,CAAiBT,GAAjB,EAAqBI,CAArB,EAAuBE,CAAvB,EAAyBL,UAAzB,EAAoC;AAChC,MAAIU,OAAO,GAACL,CAAZ;AACA,MAAIM,CAAC,GAAC,IAAEN,CAAF,GAAI,CAAV;AACA,MAAIO,CAAC,GAAC,IAAEP,CAAF,GAAI,CAAV,CAHgC,CAI9B;;AACA,MAAIM,CAAC,GAAGR,CAAJ,IAASJ,GAAG,CAACY,CAAD,CAAH,GAASZ,GAAG,CAACW,OAAD,CAAzB,EACAA,OAAO,GAAGC,CAAV,CAN8B,CAQhC;;AACA,MAAIC,CAAC,GAAGT,CAAJ,IAASJ,GAAG,CAACa,CAAD,CAAH,GAASb,GAAG,CAACW,OAAD,CAAzB,EACIA,OAAO,GAAGE,CAAV,CAV4B,CAYhC;;AACA,MAAIF,OAAO,IAAIL,CAAf,EACA;AACII,IAAAA,IAAI,CAACV,GAAD,EAAKM,CAAL,EAAOK,OAAP,EAAeV,UAAf,CAAJ,CADJ,CAEI;;AACAQ,IAAAA,OAAO,CAACT,GAAD,EAAMI,CAAN,EAASO,OAAT,EAAiBV,UAAjB,CAAP;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBH,GAAlB;AACH;;AAGD,SAASU,IAAT,CAAcV,GAAd,EAAkBM,CAAlB,EAAoBQ,CAApB,EAAsBb,UAAtB,EAAiC;AAC7B,MAAIc,IAAI,GAACf,GAAG,CAACM,CAAD,CAAZ;AACAN,EAAAA,GAAG,CAACM,CAAD,CAAH,GAAON,GAAG,CAACc,CAAD,CAAV;AACAd,EAAAA,GAAG,CAACc,CAAD,CAAH,GAAOC,IAAP;AACAd,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAACV,CAAD,EAAGQ,CAAH,CAAhB;AACAb,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAACV,CAAD,EAAGQ,CAAH,CAAhB;AACAb,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAACV,CAAD,EAAGQ,CAAH,CAAhB;AACH","sourcesContent":["export default function heap_sort_animations(arr){\n    let animations=[]\n    console.log(arr)\n\n    let n =arr.length\n    for (let i=Math.floor(n/2)-1;i>=0;i--){\n        heapify(arr,n,i,animations)\n    }\n    console.log(arr)\n\n    for (let i=n-1; i>0; i--) \n    {\n        // Move current root to end \n         swap(arr,0,i)\n        // call max heapify on the reduced heap \n        heapify(arr, i, 0); \n    } \n    console.log(arr)\n    // return animations\n}\n\nfunction heapify(arr,n,i,animations){\n    let largest=i\n    let l=2*i+1\n    let r=2*i+2\n      // If left child is larger than root \n      if (l < n && arr[l] > arr[largest]) \n      largest = l; \n\n    // If right child is larger than largest so far \n    if (r < n && arr[r] > arr[largest]) \n        largest = r; \n\n    // If largest is not root \n    if (largest != i) \n    { \n        swap(arr,i,largest,animations)\n        // Recursively heapify the affected sub-tree \n        heapify(arr, n, largest,animations); \n    } \n    console.log(\"asd\",arr)\n}\n\n\nfunction swap(arr,i,k,animations){\n    let temp=arr[i]\n    arr[i]=arr[k]\n    arr[k]=temp\n    animations.push([i,k])\n    animations.push([i,k])\n    animations.push([i,k])\n}"]},"metadata":{},"sourceType":"module"}