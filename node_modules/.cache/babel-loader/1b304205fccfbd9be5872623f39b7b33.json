{"ast":null,"code":"export default function merge_sort_animations(arr) {\n  let animations = []; // let k=1\n  // asd(k)\n  // return k\n\n  merge(arr);\n  return arr;\n} // function asd(k){\n//     return k++\n// }\n\nfunction merge(arr) {\n  if (arr.length > 1) {\n    let midIndx = Math.floor(arr.length / 2);\n    let L = arr.slice(0, midIndx);\n    let R = arr.slice(midIndx);\n    merge(arr, L, animations, counter);\n    merge(arr, R, animations, counter);\n    let i,\n        j,\n        k = 0;\n\n    while (i < L.length && j < R.length) {\n      if (L[i] > R[j]) {\n        arr[counter[0]] = L[i];\n        i++;\n      } else {\n        arr[counter[0]] = R[j];\n        j++;\n      }\n\n      counter[0]++;\n    }\n\n    while (i < L.length) {\n      arr[counter[0]] = L[i];\n      i++;\n      counter[0]++;\n    }\n\n    while (j < R.length) {\n      arr[counter[0]] = R[j];\n      j++;\n      counter[0]++;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["merge_sort_animations","arr","animations","merge","length","midIndx","Math","floor","L","slice","R","counter","i","j","k"],"mappings":"AAAA,eAAe,SAASA,qBAAT,CAA+BC,GAA/B,EAAmC;AAClD,MAAIC,UAAU,GAAC,EAAf,CADkD,CAElD;AACA;AACA;;AACAC,EAAAA,KAAK,CAACF,GAAD,CAAL;AACA,SAAOA,GAAP;AACC,C,CAED;AACA;AAEA;;AAEA,SAASE,KAAT,CAAeF,GAAf,EAAmB;AACf,MAAIA,GAAG,CAACG,MAAJ,GAAa,CAAjB,EAAmB;AACf,QAAIC,OAAO,GAACC,IAAI,CAACC,KAAL,CAAWN,GAAG,CAACG,MAAJ,GAAW,CAAtB,CAAZ;AACA,QAAII,CAAC,GAAGP,GAAG,CAACQ,KAAJ,CAAU,CAAV,EAAYJ,OAAZ,CAAR;AACA,QAAIK,CAAC,GAAGT,GAAG,CAACQ,KAAJ,CAAUJ,OAAV,CAAR;AACAF,IAAAA,KAAK,CAACF,GAAD,EAAKO,CAAL,EAAON,UAAP,EAAkBS,OAAlB,CAAL;AACAR,IAAAA,KAAK,CAACF,GAAD,EAAKS,CAAL,EAAOR,UAAP,EAAkBS,OAAlB,CAAL;AACA,QAAIC,CAAJ;AAAA,QAAMC,CAAN;AAAA,QAAQC,CAAC,GAAC,CAAV;;AAEA,WAAMF,CAAC,GAACJ,CAAC,CAACJ,MAAJ,IAAcS,CAAC,GAACH,CAAC,CAACN,MAAxB,EAA+B;AAC3B,UAAII,CAAC,CAACI,CAAD,CAAD,GAAKF,CAAC,CAACG,CAAD,CAAV,EAAc;AACVZ,QAAAA,GAAG,CAACU,OAAO,CAAC,CAAD,CAAR,CAAH,GAAgBH,CAAC,CAACI,CAAD,CAAjB;AACAA,QAAAA,CAAC;AACJ,OAHD,MAIK;AACDX,QAAAA,GAAG,CAACU,OAAO,CAAC,CAAD,CAAR,CAAH,GAAgBD,CAAC,CAACG,CAAD,CAAjB;AACAA,QAAAA,CAAC;AACJ;;AACDF,MAAAA,OAAO,CAAC,CAAD,CAAP;AAEH;;AAED,WAAOC,CAAC,GAACJ,CAAC,CAACJ,MAAX,EAAkB;AACdH,MAAAA,GAAG,CAACU,OAAO,CAAC,CAAD,CAAR,CAAH,GAAgBH,CAAC,CAACI,CAAD,CAAjB;AACAA,MAAAA,CAAC;AACDD,MAAAA,OAAO,CAAC,CAAD,CAAP;AACH;;AAED,WAAOE,CAAC,GAACH,CAAC,CAACN,MAAX,EAAkB;AACdH,MAAAA,GAAG,CAACU,OAAO,CAAC,CAAD,CAAR,CAAH,GAAgBD,CAAC,CAACG,CAAD,CAAjB;AACAA,MAAAA,CAAC;AACDF,MAAAA,OAAO,CAAC,CAAD,CAAP;AACH;AACJ;AACJ","sourcesContent":["export default function merge_sort_animations(arr){\nlet animations=[]\n// let k=1\n// asd(k)\n// return k\nmerge(arr)\nreturn arr\n}\n\n// function asd(k){\n//     return k++\n\n// }\n\nfunction merge(arr){\n    if (arr.length > 1){\n        let midIndx=Math.floor(arr.length/2)\n        let L = arr.slice(0,midIndx)\n        let R = arr.slice(midIndx)\n        merge(arr,L,animations,counter)\n        merge(arr,R,animations,counter)\n        let i,j,k=0\n\n        while(i<L.length && j<R.length){\n            if (L[i]>R[j]){\n                arr[counter[0]]=L[i]\n                i++\n            }\n            else {\n                arr[counter[0]]=R[j]\n                j++\n            }\n            counter[0]++\n        \n        }\n        \n        while (i<L.length){\n            arr[counter[0]]=L[i]\n            i++\n            counter[0]++\n        }\n        \n        while (j<R.length){\n            arr[counter[0]]=R[j]\n            j++\n            counter[0]++\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}