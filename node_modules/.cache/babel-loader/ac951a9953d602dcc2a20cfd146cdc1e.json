{"ast":null,"code":"export default function heap_sort_animations(arr) {\n  let animations = [];\n  let n = arr.length;\n\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(arr, n, i, animations);\n  }\n\n  for (let i = n - 1; i > 0; i--) {\n    // Move current root to end \n    swap(arr, 0, i, animations); // call max heapify on the reduced heap \n\n    heapify(arr, i, 0, animations);\n  }\n\n  console.log(arr);\n  return animations;\n}\n\nfunction heapify(arr, n, i, animations) {\n  let smallest = i;\n  let l = 2 * i + 1;\n  let r = 2 * i + 2; // If left child is larger than root \n\n  if (l < n && arr[l] < arr[smallest]) smallest = l; // If right child is larger than largest so far \n\n  if (r < n && arr[r] < arr[smallest]) smallest = r; // If largest is not root \n\n  if (smallest !== i) {\n    swap(arr, i, smallest, animations); // Recursively heapify the affected sub-tree \n\n    heapify(arr, n, smallest, animations);\n  }\n}\n\nfunction swap(arr, i, k, animations) {\n  let temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n  animations.push([i, k]);\n  animations.push([i, k]);\n  animations.push([i, k]);\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/heap_sort.js"],"names":["heap_sort_animations","arr","animations","n","length","i","Math","floor","heapify","swap","console","log","smallest","l","r","k","temp","push"],"mappings":"AAAA,eAAe,SAASA,oBAAT,CAA8BC,GAA9B,EAAkC;AAC7C,MAAIC,UAAU,GAAC,EAAf;AAEA,MAAIC,CAAC,GAAEF,GAAG,CAACG,MAAX;;AACA,OAAK,IAAIC,CAAC,GAACC,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAC,CAAb,IAAgB,CAA3B,EAA6BE,CAAC,IAAE,CAAhC,EAAkCA,CAAC,EAAnC,EAAsC;AAClCG,IAAAA,OAAO,CAACP,GAAD,EAAKE,CAAL,EAAOE,CAAP,EAASH,UAAT,CAAP;AACH;;AAED,OAAK,IAAIG,CAAC,GAACF,CAAC,GAAC,CAAb,EAAeE,CAAC,GAAC,CAAjB,EAAmBA,CAAC,EAApB,EACA;AACI;AACCI,IAAAA,IAAI,CAACR,GAAD,EAAK,CAAL,EAAOI,CAAP,EAASH,UAAT,CAAJ,CAFL,CAGI;;AACAM,IAAAA,OAAO,CAACP,GAAD,EAAKI,CAAL,EAAO,CAAP,EAASH,UAAT,CAAP;AACH;;AACDQ,EAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AACA,SAAOC,UAAP;AACH;;AAED,SAASM,OAAT,CAAiBP,GAAjB,EAAqBE,CAArB,EAAuBE,CAAvB,EAAyBH,UAAzB,EAAoC;AAChC,MAAIU,QAAQ,GAACP,CAAb;AACA,MAAIQ,CAAC,GAAC,IAAER,CAAF,GAAI,CAAV;AACA,MAAIS,CAAC,GAAC,IAAET,CAAF,GAAI,CAAV,CAHgC,CAI9B;;AACA,MAAIQ,CAAC,GAAGV,CAAJ,IAASF,GAAG,CAACY,CAAD,CAAH,GAASZ,GAAG,CAACW,QAAD,CAAzB,EACAA,QAAQ,GAAGC,CAAX,CAN8B,CAQhC;;AACA,MAAIC,CAAC,GAAGX,CAAJ,IAASF,GAAG,CAACa,CAAD,CAAH,GAASb,GAAG,CAACW,QAAD,CAAzB,EACIA,QAAQ,GAAGE,CAAX,CAV4B,CAYhC;;AACA,MAAIF,QAAQ,KAAKP,CAAjB,EACA;AACII,IAAAA,IAAI,CAACR,GAAD,EAAKI,CAAL,EAAOO,QAAP,EAAgBV,UAAhB,CAAJ,CADJ,CAEI;;AACAM,IAAAA,OAAO,CAACP,GAAD,EAAME,CAAN,EAASS,QAAT,EAAkBV,UAAlB,CAAP;AACH;AACJ;;AAGD,SAASO,IAAT,CAAcR,GAAd,EAAkBI,CAAlB,EAAoBU,CAApB,EAAsBb,UAAtB,EAAiC;AAC7B,MAAIc,IAAI,GAACf,GAAG,CAACI,CAAD,CAAZ;AACAJ,EAAAA,GAAG,CAACI,CAAD,CAAH,GAAOJ,GAAG,CAACc,CAAD,CAAV;AACAd,EAAAA,GAAG,CAACc,CAAD,CAAH,GAAOC,IAAP;AACAd,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAACZ,CAAD,EAAGU,CAAH,CAAhB;AACAb,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAACZ,CAAD,EAAGU,CAAH,CAAhB;AACAb,EAAAA,UAAU,CAACe,IAAX,CAAgB,CAACZ,CAAD,EAAGU,CAAH,CAAhB;AACH","sourcesContent":["export default function heap_sort_animations(arr){\n    let animations=[]\n\n    let n =arr.length\n    for (let i=Math.floor(n/2)-1;i>=0;i--){\n        heapify(arr,n,i,animations)\n    }\n\n    for (let i=n-1;i>0;i--) \n    {\n        // Move current root to end \n         swap(arr,0,i,animations)\n        // call max heapify on the reduced heap \n        heapify(arr,i,0,animations); \n    }\n    console.log(arr)\n    return animations\n}\n\nfunction heapify(arr,n,i,animations){\n    let smallest=i\n    let l=2*i+1\n    let r=2*i+2\n      // If left child is larger than root \n      if (l < n && arr[l] < arr[smallest]) \n      smallest = l; \n\n    // If right child is larger than largest so far \n    if (r < n && arr[r] < arr[smallest]) \n        smallest = r; \n\n    // If largest is not root \n    if (smallest !== i) \n    { \n        swap(arr,i,smallest,animations)\n        // Recursively heapify the affected sub-tree \n        heapify(arr, n, smallest,animations); \n    } \n}\n\n\nfunction swap(arr,i,k,animations){\n    let temp=arr[i]\n    arr[i]=arr[k]\n    arr[k]=temp\n    animations.push([i,k])\n    animations.push([i,k])\n    animations.push([i,k])\n}"]},"metadata":{},"sourceType":"module"}