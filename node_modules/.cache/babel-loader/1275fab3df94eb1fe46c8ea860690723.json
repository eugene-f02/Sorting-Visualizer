{"ast":null,"code":"var _jsxFileName = \"/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js\";\nimport React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './generateBars.js';\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js';\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js';\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js';\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js';\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js';\nconst ANIMATION_SPEED = 10;\n\nclass Bars extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      bars: generateBars(50),\n      color: [],\n      timeOuts: []\n    };\n    this.state.resetBars = this.state.bars.slice();\n    this.state.color = Array(this.state.bars.length).fill('black');\n    this.sortBars = this.sortBars.bind(this);\n  }\n\n  renderBar(val, index) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      val: val,\n      color: this.state.color[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    });\n  }\n\n  get_animations(sortType) {\n    switch (sortType) {\n      case \"bubble\":\n        return get_bubble_sort_animations(this.state.bars.slice());\n\n      case \"merge\":\n        return get_merge_sort_animations(this.state.bars.slice());\n\n      case \"insert\":\n        return get_insertion_sort_animations(this.state.bars.slice());\n\n      case \"quick\":\n        return get_quick_sort_animations(this.state.bars.slice());\n\n      case \"heap\":\n        return get_heap_sort_animations(this.state.bars.slice());\n\n      default:\n        return;\n    }\n  }\n\n  clearTimouts() {\n    for (let id in this.state.timeOuts) {\n      clearTimeout(id);\n    }\n\n    this.setState({\n      bars: this.state.resetBars,\n      timeOuts: []\n    });\n  }\n\n  sortBars(sortType) {\n    let copyBars = this.state.bars.slice();\n    let copyColor = this.state.color.slice();\n    let animations = [];\n    animations = this.get_animations(sortType);\n    animations.forEach((value, index) => {\n      if (index % 3 === 0) {\n        this.state.timeOuts.push(setTimeout(() => {\n          copyColor[value[0]] = `red`;\n          copyColor[value[1]] = `blue`;\n          this.setState({\n            color: copyColor\n          });\n        }, ANIMATION_SPEED * index));\n      } else if (index % 3 === 1) {\n        this.state.timeOuts.push(setTimeout(() => {\n          if (sortType === \"merge\") {\n            copyBars[value[0]] = value[1];\n          } else {\n            swap(copyBars, value[0], value[1]);\n            copyColor[value[0]] = `green`;\n            copyColor[value[1]] = `green`;\n          }\n\n          this.setState({\n            bars: copyBars,\n            color: copyColor\n          });\n        }, ANIMATION_SPEED * index + ANIMATION_SPEED / 2));\n      } else {\n        this.state.timeOuts.push(setTimeout(() => {\n          copyColor[value[0]] = `black`;\n          copyColor[value[1]] = `black`;\n          this.setState({\n            color: copyColor\n          });\n        }, ANIMATION_SPEED * index + ANIMATION_SPEED));\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.setState({\n        bars: this.state.resetBars\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"bubble\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"merge\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"insert\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"quick\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"heap\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.clearTimouts(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, \"Stop\"), this.state.bars.map((val, index) => this.renderBar(val, index)));\n  }\n\n}\n\nexport function swap(arr, i, k) {\n  let temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\nexport default Bars;","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js"],"names":["React","Bar","generateBars","get_bubble_sort_animations","get_merge_sort_animations","get_insertion_sort_animations","get_quick_sort_animations","get_heap_sort_animations","ANIMATION_SPEED","Bars","Component","constructor","state","bars","color","timeOuts","resetBars","slice","Array","length","fill","sortBars","bind","renderBar","val","index","get_animations","sortType","clearTimouts","id","clearTimeout","setState","copyBars","copyColor","animations","forEach","value","push","setTimeout","swap","render","map","arr","i","k","temp"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './generateBars.js'\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js'\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js'\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js'\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js'\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js'\n\nconst ANIMATION_SPEED=10\n\nclass Bars extends React.Component{\n    constructor(){\n        super()\n        this.state={bars: generateBars(50),color:[],timeOuts:[]}\n        this.state.resetBars=this.state.bars.slice()\n        this.state.color=Array(this.state.bars.length).fill('black')\n\n        this.sortBars=this.sortBars.bind(this)\n    }\n\n    renderBar(val,index){\n        return (\n        <Bar key={index} val={val} color={this.state.color[index]}/>\n        );\n    }\n    get_animations(sortType){\n        switch(sortType){\n            case \"bubble\": return get_bubble_sort_animations(this.state.bars.slice())\n            case \"merge\": return get_merge_sort_animations(this.state.bars.slice())\n            case \"insert\": return get_insertion_sort_animations(this.state.bars.slice())\n            case \"quick\": return get_quick_sort_animations(this.state.bars.slice())\n            case \"heap\": return get_heap_sort_animations(this.state.bars.slice())\n            default: return\n        }\n    }\n\n    clearTimouts(){\n        for (let id in this.state.timeOuts){\n            clearTimeout(id)\n        }\n        this.setState({bars: this.state.resetBars,timeOuts:[]})\n\n    }\n\n    sortBars(sortType){\n        let copyBars=this.state.bars.slice()\n        let copyColor=this.state.color.slice()\n        let animations=[]\n\n        animations=this.get_animations(sortType)\n        animations.forEach( (value,index) =>{\n            if (index % 3 === 0){\n                this.state.timeOuts.push(setTimeout( () => {\n                    copyColor[value[0]]=`red`\n                    copyColor[value[1]]=`blue`\n                    this.setState({color:copyColor})\n                },ANIMATION_SPEED*index))\n            }\n            else if (index % 3 === 1 ){\n                this.state.timeOuts.push(setTimeout( () => {\n\n                    if (sortType === \"merge\"){\n                        copyBars[value[0]]=value[1]   \n                    }\n                    else{\n                        swap(copyBars,value[0],value[1])\n                        copyColor[value[0]]=`green`\n                        copyColor[value[1]]=`green`\n                    }\n                        \n                    this.setState({bars:copyBars,color:copyColor})\n                },ANIMATION_SPEED*index+ANIMATION_SPEED/2)) \n            }\n            else{\n                this.state.timeOuts.push(setTimeout( () => {\n                    copyColor[value[0]]=`black`\n                    copyColor[value[1]]=`black`\n                    this.setState({color:copyColor})\n                }, ANIMATION_SPEED*index+ANIMATION_SPEED))\n            }\n            });    \n    }\n\n    render(){\n        return(\n            <>\n            <button onClick={() => this.setState({bars: this.state.resetBars})}>Reset</button>\n            <button onClick={() => this.sortBars(\"bubble\")}>Bubble Sort</button>\n            <button onClick={() => this.sortBars(\"merge\")}>Merge Sort</button>\n            <button onClick={() => this.sortBars(\"insert\")}>Insertion Sort</button>\n            <button onClick={() => this.sortBars(\"quick\")}>Quick Sort</button>\n            <button onClick={() => this.sortBars(\"heap\")}>Heap Sort</button>\n            <button onClick={() => this.clearTimouts()}>Stop</button>\n            {this.state.bars.map( (val,index) => this.renderBar(val,index))}\n\n            </>\n        );\n    }\n}\n\nexport function swap(arr,i,k){\n    let temp=arr[i]\n    arr[i]=arr[k]\n    arr[k]=temp\n}\n\nexport default Bars\n"]},"metadata":{},"sourceType":"module"}