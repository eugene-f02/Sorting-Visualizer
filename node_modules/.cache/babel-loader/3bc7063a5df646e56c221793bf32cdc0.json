{"ast":null,"code":"export default function merge_sort_animations(arr) {\n  const testArr = arr.slice();\n  let animations = []; // let k=1\n  // asd(k)\n  // return k\n\n  merge(arr, testArr, animations, 0, arr.length - 1);\n  return animations;\n} // function asd(k){\n//     return k++\n// }\n\nfunction merge(arr, auxArr, animations, startIndx, endIndx) {\n  if (endIndx !== startIndx) {\n    let midIndx = Math.floor((startIndx + endIndx) / 2); //[5,3,5,6,3,1] \n    // 0 6       | 0 3      | 1 3    |\n    // 3         | 1        | 2      |\n    // [5,3,5]   | [5]      | [3]    |\n    // [6,3,1]   | [3,5]    | [5]    |\n    // console.log(startIndx,midIndx,endIndx)\n\n    merge(auxArr, arr, animations, startIndx, midIndx);\n    merge(auxArr, arr, animations, midIndx + 1, endIndx);\n    let i = startIndx,\n        j = midIndx + 1,\n        k = startIndx; // 0 2 0\n\n    while (i <= midIndx && j <= endIndx) {\n      // console.log(auxArr[i],auxArr[j],auxArr)\n      if (auxArr[i] > auxArr[j]) {\n        arr[k] = auxArr[i];\n        animations.push([i, j]);\n        animations.push([i, auxArr[i]]);\n        animations.push([i, j]);\n        i++;\n      } else {\n        arr[k] = auxArr[j];\n        animations.push([i, j]);\n        animations.push([i, auxArr[j]]);\n        animations.push([i, j]);\n        j++;\n      }\n\n      k++;\n    }\n\n    while (i <= midIndx) {\n      arr[k] = auxArr[i];\n      animations.push([i, i]);\n      animations.push([i, auxArr[i]]);\n      animations.push([i, i]);\n      i++;\n      k++;\n    }\n\n    while (j <= endIndx) {\n      arr[k] = auxArr[j];\n      animations.push([j, j]);\n      animations.push([j, auxArr[j]]);\n      animations.push([j, j]);\n      j++;\n      k++;\n    } // console.log(auxArr)\n\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["merge_sort_animations","arr","testArr","slice","animations","merge","length","auxArr","startIndx","endIndx","midIndx","Math","floor","i","j","k","push"],"mappings":"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","sourcesContent":["export default function merge_sort_animations(arr){\nconst testArr=arr.slice()\nlet animations=[]\n// let k=1\n// asd(k)\n// return k\nmerge(arr,testArr,animations,0,arr.length-1)\nreturn animations\n}\n\n// function asd(k){\n//     return k++\n\n// }\n\nfunction merge(arr,auxArr,animations,startIndx,endIndx){   \n    if (endIndx!==startIndx){\n        let midIndx=Math.floor((startIndx+endIndx)/2)             \n                   //[5,3,5,6,3,1] \n\n                   // 0 6       | 0 3      | 1 3    |\n                   // 3         | 1        | 2      |\n                   // [5,3,5]   | [5]      | [3]    |\n                   // [6,3,1]   | [3,5]    | [5]    |\n        // console.log(startIndx,midIndx,endIndx)\n        merge(auxArr,arr,animations,startIndx,midIndx)\n        merge(auxArr,arr,animations,midIndx+1,endIndx)\n        let i=startIndx,j=midIndx+1,k=startIndx\n        \n        \n        \n// 0 2 0\n        while(i<=midIndx && j<=endIndx){\n            \n            // console.log(auxArr[i],auxArr[j],auxArr)\n\n            if (auxArr[i]>auxArr[j]){\n             arr[k]=auxArr[i]\n             animations.push([i,j]);\n             animations.push([i,auxArr[i]]);\n             animations.push([i,j]);\n             i++\n           \n\n\n\n            } \n            else {\n                arr[k]=auxArr[j]\n                animations.push([i,j]);\n                animations.push([i,auxArr[j]]);\n                animations.push([i,j]);\n                j++\n            \n\n\n\n            \n\n            }\n            k++\n\n\n        }\n        \n        while (i<=midIndx){\n            arr[k]=auxArr[i]\n            animations.push([i,i]);\n            animations.push([i,auxArr[i]]);\n            animations.push([i,i]);\n\n\n            i++\n\n          \n            k++\n\n\n        }\n        \n        while (j<=endIndx){\n            arr[k]=auxArr[j]\n            animations.push([j,j]);\n            animations.push([j,auxArr[j]]);\n            animations.push([j,j]);\n\n            j++\n            \n            k++\n            \n        }\n        // console.log(auxArr)\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}