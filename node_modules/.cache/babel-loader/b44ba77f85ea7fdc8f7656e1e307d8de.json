{"ast":null,"code":"// export default function merge_sort_animations(arr){\n// console.log(arr)\n// let testArr=arr.slice()\n// let animations=[]\n// // let k=1\n// // asd(k)\n// // return k\n// merge(arr,testArr,animations,0,arr.length-1)\n// return arr\n// }\n// // function asd(k){\n// //     return k++\n// // }\n// function merge(arr,auxArr,animations,startIndx,endIndx){   \n//     if (endIndx!==startIndx){\n//         let midIndx=Math.floor((startIndx+endIndx)/2)             \n//                    //[5,3,5,6,3,1] \n//                    // 0 6       | 0 3      | 1 3    |\n//                    // 3         | 1        | 2      |\n//                    // [5,3,5]   | [5]      | [3]    |\n//                    // [6,3,1]   | [3,5]    | [5]    |\n//         console.log(startIndx,midIndx,endIndx)\n//         merge(arr,auxArr,animations,startIndx,midIndx)\n//         merge(arr,auxArr,animations,midIndx+1,endIndx)\n//         let i=startIndx,j=midIndx+1,k=startIndx\n// // 0 2 0\n//         while(i<=midIndx && j<=endIndx){\n//             console.log(auxArr[i],auxArr[j],auxArr)\n//             if (auxArr[i]>auxArr[j]){\n//              arr[k]=auxArr[i]\n//              animations.push([i,j]);\n//              animations.push([i,arr[i]]);\n//              animations.push([i,j]);\n//              i++\n//             } \n//             else {\n//                 arr[k]=auxArr[j]\n//                 animations.push([i,j]);\n//                 animations.push([i,arr[j]]);\n//                 animations.push([i,j]);\n//                 j++\n//             }\n//             k++\n//         }\n//         while (i<=midIndx){\n//             arr[k]=auxArr[i]\n//             animations.push([i,i]);\n//             animations.push([i,arr[i]]);\n//             animations.push([i,i]);\n//             i++\n//             k++\n//         }\n//         while (j<=endIndx){\n//             arr[k]=auxArr[j]\n//             animations.push([j,j]);\n//             animations.push([j,arr[j]]);\n//             animations.push([j,j]);\n//             j++\n//             k++\n//         }\n//         console.log(auxArr)\n//     }\n// }\nexport default function get_merge_sort_animations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  console.log(auxiliaryArray);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] > auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["get_merge_sort_animations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","console","log","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["// export default function merge_sort_animations(arr){\n// console.log(arr)\n// let testArr=arr.slice()\n// let animations=[]\n// // let k=1\n// // asd(k)\n// // return k\n// merge(arr,testArr,animations,0,arr.length-1)\n// return arr\n// }\n\n// // function asd(k){\n// //     return k++\n\n// // }\n\n// function merge(arr,auxArr,animations,startIndx,endIndx){   \n//     if (endIndx!==startIndx){\n//         let midIndx=Math.floor((startIndx+endIndx)/2)             \n//                    //[5,3,5,6,3,1] \n\n//                    // 0 6       | 0 3      | 1 3    |\n//                    // 3         | 1        | 2      |\n//                    // [5,3,5]   | [5]      | [3]    |\n//                    // [6,3,1]   | [3,5]    | [5]    |\n//         console.log(startIndx,midIndx,endIndx)\n//         merge(arr,auxArr,animations,startIndx,midIndx)\n//         merge(arr,auxArr,animations,midIndx+1,endIndx)\n//         let i=startIndx,j=midIndx+1,k=startIndx\n        \n        \n        \n// // 0 2 0\n//         while(i<=midIndx && j<=endIndx){\n            \n//             console.log(auxArr[i],auxArr[j],auxArr)\n\n//             if (auxArr[i]>auxArr[j]){\n//              arr[k]=auxArr[i]\n//              animations.push([i,j]);\n//              animations.push([i,arr[i]]);\n//              animations.push([i,j]);\n//              i++\n           \n\n\n\n//             } \n//             else {\n//                 arr[k]=auxArr[j]\n//                 animations.push([i,j]);\n//                 animations.push([i,arr[j]]);\n//                 animations.push([i,j]);\n//                 j++\n            \n\n\n\n            \n\n//             }\n//             k++\n\n\n//         }\n        \n//         while (i<=midIndx){\n//             arr[k]=auxArr[i]\n//             animations.push([i,i]);\n//             animations.push([i,arr[i]]);\n//             animations.push([i,i]);\n\n\n//             i++\n\n          \n//             k++\n\n\n//         }\n        \n//         while (j<=endIndx){\n//             arr[k]=auxArr[j]\n//             animations.push([j,j]);\n//             animations.push([j,arr[j]]);\n//             animations.push([j,j]);\n\n//             j++\n            \n//             k++\n            \n//         }\n//         console.log(auxArr)\n//     }\n// }\n\n\nexport default function get_merge_sort_animations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    console.log(auxiliaryArray)\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] > auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }"]},"metadata":{},"sourceType":"module"}