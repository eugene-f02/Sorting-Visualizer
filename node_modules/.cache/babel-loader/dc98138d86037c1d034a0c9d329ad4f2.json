{"ast":null,"code":"export default function merge_sort_animations(arr) {\n  let animations = [];\n  merge(arr, arr, animations);\n  return arr;\n}\n\nfunction merge(arr, auxiliaryArr, animations) {\n  if (auxiliaryArr.length <= 1) return;\n  let midIndx = Math.floor(auxiliaryArr.length / 2);\n  let L = auxiliaryArr.slice(0, midIndx);\n  let R = auxiliaryArr.slice(midIndx);\n  merge(arr, L, animations);\n  merge(arr, R, animations);\n  let i,\n      j,\n      k = 0;\n\n  while (i < L.length && j < R.length) {\n    if (L[i] > R[j]) {\n      arr[k] = L[i];\n      i++;\n    } else {\n      arr[k] = R[j];\n      j++;\n    }\n\n    k++;\n  }\n\n  while (i < L.length) {\n    arr[k] = L[i];\n    i++;\n    k++;\n  }\n\n  while (j < R.length) {\n    arr[k] = R[j];\n    j++;\n    k++;\n  }\n}","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/sorting-algo/merge_sort.js"],"names":["merge_sort_animations","arr","animations","merge","auxiliaryArr","length","midIndx","Math","floor","L","slice","R","i","j","k"],"mappings":"AAAA,eAAe,SAASA,qBAAT,CAA+BC,GAA/B,EAAmC;AAClD,MAAIC,UAAU,GAAC,EAAf;AACAC,EAAAA,KAAK,CAACF,GAAD,EAAKA,GAAL,EAASC,UAAT,CAAL;AACA,SAAOD,GAAP;AACC;;AAED,SAASE,KAAT,CAAeF,GAAf,EAAmBG,YAAnB,EAAgCF,UAAhC,EAA2C;AACvC,MAAIE,YAAY,CAACC,MAAb,IAAuB,CAA3B,EAA8B;AAC9B,MAAIC,OAAO,GAACC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,MAAb,GAAoB,CAA/B,CAAZ;AACA,MAAII,CAAC,GAAGL,YAAY,CAACM,KAAb,CAAmB,CAAnB,EAAqBJ,OAArB,CAAR;AACA,MAAIK,CAAC,GAAEP,YAAY,CAACM,KAAb,CAAmBJ,OAAnB,CAAP;AACAH,EAAAA,KAAK,CAACF,GAAD,EAAKQ,CAAL,EAAOP,UAAP,CAAL;AACAC,EAAAA,KAAK,CAACF,GAAD,EAAKU,CAAL,EAAOT,UAAP,CAAL;AACA,MAAIU,CAAJ;AAAA,MAAMC,CAAN;AAAA,MAAQC,CAAC,GAAC,CAAV;;AAEA,SAAMF,CAAC,GAACH,CAAC,CAACJ,MAAJ,IAAcQ,CAAC,GAACF,CAAC,CAACN,MAAxB,EAA+B;AAC3B,QAAII,CAAC,CAACG,CAAD,CAAD,GAAKD,CAAC,CAACE,CAAD,CAAV,EAAc;AACVZ,MAAAA,GAAG,CAACa,CAAD,CAAH,GAAOL,CAAC,CAACG,CAAD,CAAR;AACAA,MAAAA,CAAC;AACJ,KAHD,MAIK;AACDX,MAAAA,GAAG,CAACa,CAAD,CAAH,GAAOH,CAAC,CAACE,CAAD,CAAR;AACAA,MAAAA,CAAC;AACJ;;AACDC,IAAAA,CAAC;AAEJ;;AAED,SAAOF,CAAC,GAACH,CAAC,CAACJ,MAAX,EAAkB;AACdJ,IAAAA,GAAG,CAACa,CAAD,CAAH,GAAOL,CAAC,CAACG,CAAD,CAAR;AACAA,IAAAA,CAAC;AACDE,IAAAA,CAAC;AACJ;;AAED,SAAOD,CAAC,GAACF,CAAC,CAACN,MAAX,EAAkB;AACdJ,IAAAA,GAAG,CAACa,CAAD,CAAH,GAAOH,CAAC,CAACE,CAAD,CAAR;AACAA,IAAAA,CAAC;AACDC,IAAAA,CAAC;AACJ;AACJ","sourcesContent":["export default function merge_sort_animations(arr){\nlet animations=[]\nmerge(arr,arr,animations)\nreturn arr\n}\n\nfunction merge(arr,auxiliaryArr,animations){\n    if (auxiliaryArr.length <= 1) return;\n    let midIndx=Math.floor(auxiliaryArr.length/2)\n    let L = auxiliaryArr.slice(0,midIndx)\n    let R= auxiliaryArr.slice(midIndx)\n    merge(arr,L,animations)\n    merge(arr,R,animations)\n    let i,j,k=0\n\n    while(i<L.length && j<R.length){\n        if (L[i]>R[j]){\n            arr[k]=L[i]\n            i++\n        }\n        else {\n            arr[k]=R[j]\n            j++\n        }\n        k++\n    \n    }\n    \n    while (i<L.length){\n        arr[k]=L[i]\n        i++\n        k++\n    }\n    \n    while (j<R.length){\n        arr[k]=R[j]\n        j++\n        k++\n    }\n}\n"]},"metadata":{},"sourceType":"module"}