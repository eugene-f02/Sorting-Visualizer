{"ast":null,"code":"var _jsxFileName = \"/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js\";\nimport React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './misc/generateBars.js';\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js';\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js';\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js';\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js';\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js';\n\nclass Bars extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      bars: generateBars(50),\n      color: [],\n      lastTimeOutId: 6,\n      animation_speed: 10,\n      num_of_bars: 50\n    };\n    this.state.resetBars = this.state.bars.slice();\n    this.state.color = Array(this.state.bars.length).fill('black');\n    this.sortBars = this.sortBars.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === 'num_of_bars') {\n      let copyBars = this.state.bars.slice();\n      let copyColor = this.state.color.slice();\n\n      for (let i = this.state.bars.length; i <= value; i++) {\n        copyBars.push(Math.floor(Math.random() * 800 + 100));\n        copyColor.push('black');\n      }\n    }\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  renderBar(val, index) {\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: index,\n      val: val,\n      color: this.state.color[index],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    });\n  }\n\n  get_animations(sortType) {\n    switch (sortType) {\n      case \"bubble\":\n        return get_bubble_sort_animations(this.state.bars.slice());\n\n      case \"merge\":\n        return get_merge_sort_animations(this.state.bars.slice());\n\n      case \"insert\":\n        return get_insertion_sort_animations(this.state.bars.slice());\n\n      case \"quick\":\n        return get_quick_sort_animations(this.state.bars.slice());\n\n      case \"heap\":\n        return get_heap_sort_animations(this.state.bars.slice());\n\n      default:\n        return;\n    }\n  }\n\n  clearTimouts() {\n    let newTimeoutId = window.setTimeout(function () {}, 0);\n    let copyNewTimeoutId = newTimeoutId;\n\n    while (this.state.lastTimeOutId < newTimeoutId) {\n      // clear all timeOuts\n      newTimeoutId--;\n      window.clearTimeout(newTimeoutId); // will do nothing if no timeout with id is present\n    }\n\n    this.setState({\n      lastTimeOutId: copyNewTimeoutId,\n      bars: this.state.resetBars,\n      color: Array(this.state.bars.length).fill('black')\n    });\n  }\n\n  generate_new_array() {\n    let newBars = generateBars(this.state.num_of_bars);\n    this.setState({\n      bars: newBars,\n      resetBars: newBars\n    });\n  }\n\n  sortBars(sortType) {\n    let copyBars = this.state.bars.slice();\n    let copyColor = this.state.color.slice();\n    let animations = [];\n    animations = this.get_animations(sortType);\n    console.log(animations.length);\n    animations.forEach((value, index) => {\n      if (index % 3 === 0) {\n        setTimeout(() => {\n          copyColor[value[0]] = `red`;\n          copyColor[value[1]] = `blue`;\n          this.setState({\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, this.state.animation_speed * index);\n      } else if (index % 3 === 1) {\n        setTimeout(() => {\n          if (sortType === \"merge\") {\n            copyBars[value[0]] = value[1];\n          } else {\n            swap(copyBars, value[0], value[1]);\n            copyColor[value[0]] = `green`;\n            copyColor[value[1]] = `green`;\n          }\n\n          this.setState({\n            bars: copyBars,\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, this.state.animation_speed * index);\n      } else {\n        setTimeout(() => {\n          copyColor[value[0]] = `black`;\n          copyColor[value[1]] = `black`;\n          this.setState({\n            color: copyColor,\n            lastTimeOutId: this.state.lastTimeOutId + 1\n          }); // increasing lastTimeOutId so that clearTimouts() does less iterations\n        }, this.state.animation_speed * index);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.generate_new_array(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"quick\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"heap\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"merge\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"bubble\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortBars(\"insert\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.clearTimouts(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => console.log(this.state),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"5\",\n      max: \"200\",\n      value: this.state.animation_speed,\n      name: \"animation_speed\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"10\",\n      max: \"100\",\n      value: this.state.num_of_bars,\n      name: \"num_of_bars\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    })), this.state.bars.map((val, index) => this.renderBar(val, index)));\n  }\n\n}\n\nexport function swap(arr, i, k) {\n  let temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\nexport default Bars;","map":{"version":3,"sources":["/Users/eugene/Desktop/sorting-algo/sorting-algo/src/Bars.js"],"names":["React","Bar","generateBars","get_bubble_sort_animations","get_merge_sort_animations","get_insertion_sort_animations","get_quick_sort_animations","get_heap_sort_animations","Bars","Component","constructor","state","bars","color","lastTimeOutId","animation_speed","num_of_bars","resetBars","slice","Array","length","fill","sortBars","bind","handleChange","event","name","value","target","copyBars","copyColor","i","push","Math","floor","random","setState","renderBar","val","index","get_animations","sortType","clearTimouts","newTimeoutId","window","setTimeout","copyNewTimeoutId","clearTimeout","generate_new_array","newBars","animations","console","log","forEach","swap","render","map","arr","k","temp"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Bar from './Bar.js';\nimport generateBars from './misc/generateBars.js'\nimport get_bubble_sort_animations from './sorting-algo/bubble_sort.js'\nimport get_merge_sort_animations from './sorting-algo/merge_sort.js'\nimport get_insertion_sort_animations from './sorting-algo/insert_sort.js'\nimport get_quick_sort_animations from './sorting-algo/quick_sort.js'\nimport get_heap_sort_animations from './sorting-algo/heap_sort.js'\n\n\nclass Bars extends React.Component{\n    constructor(){\n        super()\n        this.state={bars: generateBars(50),color:[],lastTimeOutId:6,animation_speed:10,num_of_bars:50}\n        this.state.resetBars=this.state.bars.slice()\n        this.state.color=Array(this.state.bars.length).fill('black')\n\n        this.sortBars=this.sortBars.bind(this)\n        this.handleChange=this.handleChange.bind(this)\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        if (name ==='num_of_bars'){\n            let copyBars=this.state.bars.slice()\n            let copyColor=this.state.color.slice()\n            for( let i = this.state.bars.length;i<=value;i++){\n                    copyBars.push(Math.floor(Math.random()*800+100));\n                    copyColor.push('black')\n            }\n\n        }\n        this.setState({\n            [name]: value\n        })\n    }\n\n    renderBar(val,index){\n        return (\n        <Bar key={index} val={val} color={this.state.color[index]}/>\n        );\n    }\n    get_animations(sortType){\n        switch(sortType){\n            case \"bubble\": return get_bubble_sort_animations(this.state.bars.slice())\n            case \"merge\": return get_merge_sort_animations(this.state.bars.slice())\n            case \"insert\": return get_insertion_sort_animations(this.state.bars.slice())\n            case \"quick\": return get_quick_sort_animations(this.state.bars.slice())\n            case \"heap\": return get_heap_sort_animations(this.state.bars.slice())\n            default: return\n        }\n    }\n\n    clearTimouts(){\n        let newTimeoutId = window.setTimeout(function() {}, 0);\n        let copyNewTimeoutId = newTimeoutId\n        while (this.state.lastTimeOutId<newTimeoutId) { // clear all timeOuts\n            newTimeoutId--\n            window.clearTimeout(newTimeoutId); // will do nothing if no timeout with id is present\n        }\n        this.setState({lastTimeOutId: copyNewTimeoutId, bars: this.state.resetBars ,color: Array(this.state.bars.length).fill('black')})\n\n    }\n    generate_new_array(){\n        let newBars=generateBars(this.state.num_of_bars)\n        this.setState({bars:newBars,resetBars: newBars})\n    }\n\n    sortBars(sortType){\n        let copyBars=this.state.bars.slice()\n        let copyColor=this.state.color.slice()\n        let animations=[]\n\n        animations=this.get_animations(sortType)\n        console.log(animations.length)\n        animations.forEach( (value,index) =>{\n            if (index % 3 === 0){\n                setTimeout( () => {\n                    copyColor[value[0]]=`red`\n                    copyColor[value[1]]=`blue`\n                    this.setState({color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1}) // increasing lastTimeOutId so that clearTimouts() does less iterations\n                },this.state.animation_speed*index)\n            }\n            else if (index % 3 === 1 ){\n               setTimeout( () => {\n                    if (sortType === \"merge\"){\n                        copyBars[value[0]]=value[1]   \n                    }\n                    else{\n                        swap(copyBars,value[0],value[1])\n                        copyColor[value[0]]=`green`\n                        copyColor[value[1]]=`green`\n                    }\n                        \n                    this.setState({bars:copyBars,color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1})// increasing lastTimeOutId so that clearTimouts() does less iterations\n                },this.state.animation_speed*index)\n            }\n            else{\n                setTimeout( () => {\n                    copyColor[value[0]]=`black`\n                    copyColor[value[1]]=`black`\n                    this.setState({color:copyColor,lastTimeOutId:this.state.lastTimeOutId+1})// increasing lastTimeOutId so that clearTimouts() does less iterations\n                }, this.state.animation_speed*index)\n            }\n            });\n    }\n\n    render(){\n        return(\n            <>\n             <div>\n            <button onClick={() => this.generate_new_array()}>Generate New Array</button>\n            <button onClick={() => this.sortBars(\"quick\")}>Quick Sort</button>\n            <button onClick={() => this.sortBars(\"heap\")}>Heap Sort</button>\n            <button onClick={() => this.sortBars(\"merge\")}>Merge Sort</button>\n            <button onClick={() => this.sortBars(\"bubble\")}>Bubble Sort</button>\n            <button onClick={() => this.sortBars(\"insert\")}>Insertion Sort</button>\n            <button onClick={() => this.clearTimouts()}>Stop</button>\n            <button onClick={() => console.log(this.state)}>State</button>\n            <input \n                    type=\"range\" \n                    min=\"5\" max=\"200\" value={this.state.animation_speed}\n                    name=\"animation_speed\" \n                    onChange={this.handleChange} \n            />\n              <input \n                    type=\"range\" \n                    min=\"10\" max=\"100\" value={this.state.num_of_bars}\n                    name=\"num_of_bars\" \n                    onChange={this.handleChange} \n            />\n            </div>\n            {this.state.bars.map( (val,index) => this.renderBar(val,index))}\n            </>\n\n        );\n    }\n}\nexport function swap(arr,i,k){\n    let temp=arr[i]\n    arr[i]=arr[k]\n    arr[k]=temp\n}\n\nexport default Bars\n"]},"metadata":{},"sourceType":"module"}